[pig]
build_tool = ant
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public
COMMON_BUILD_OPTS = "${ANT_CMD} -Djavac.version=1.7 -Dversion=${pig_jar_version} -Dzookeeper.version=${zookeeper_jar_version} -Dhive.version=${hive_jar_version} -Dtez.version=${tez_jar_version} -Daccumulo15.version=${accumulo_jar_version} -Dhbase2.version=${hbase_jar_version} -Dhadoop-common.version=${hadoop_jar_version} -Dhadoop-hdfs.version=${hadoop_jar_version} -Dhadoop-mapreduce.version=${hadoop_jar_version} -Dtest.junit.output.format=xml -Dforrest.home=${FORREST_HOME} -Dhadoopversion=23 -Dorc.version=${orc_jar_version} -Dmvnrepo=${NEXUS_URL} -Drepo.apache.snapshots=${NEXUS_URL} -Drepo.jboss.org=${GBN_MVN_REPO}"
deploy_cmd = ${COMMON_BUILD_OPTS} -f nexus-build.xml -Dstaging_repo_id=${NEXUS_DEPLOY_REPO_ID} -Dasfstagingrepo=${NEXUS_URL} stage
BUILD_PIG_COMPILE_JAR="${COMMON_BUILD_OPTS} very-clean jar pigunit-jar smoketests-jar compile-test"

    [[artifacts]]
        artifact_1 = build/pig-${pig_jar_version}.tar.gz
        artifact_2 = pig.tar.gz
        artifact_3 = build/pig-${pig_jar_version}-smoketests.jar

    [[install_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} mvn-install
        cmd_2 = ${COMMON_BUILD_OPTS} very-clean jar pigunit-jar smoketests-jar compile-test
        cmd_3 = ${COMMON_BUILD_OPTS} -buildfile contrib/piggybank/java/build.xml clean jar
        cmd_4 = ${COMMON_BUILD_OPTS} -Dant-task.version=2.1.3 tar
        cmd_5 = "tar -cz --exclude-vcs --transform 's,^build\/tar\/pig-${pig_jar_version}\/,pig/,' -f pig.tar.gz build/tar/pig-${pig_jar_version}"

    [[fortify_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} mvn-install
        cmd_2 = ${COMMON_BUILD_OPTS} very-clean jar pigunit-jar smoketests-jar compile-test
        cmd_3 = ${COMMON_BUILD_OPTS} -buildfile contrib/piggybank/java/build.xml clean jar
        cmd_4 = ${COMMON_BUILD_OPTS} -Dant-task.version=2.1.3 tar
        cmd_5 = "tar -cz --exclude-vcs --transform 's,^build\/tar\/pig-${pig_jar_version}\/,pig/,' -f pig.tar.gz build/tar/pig-${pig_jar_version}"
        cmd_6 = ${COMMON_BUILD_OPTS} -Dbuild.compiler=com.fortify.dev.ant.SCACompiler -Dsourceanalyzer.buildid=${pig_jar_version} -lib ${FORTIFY_SCA_HOME}/Core/lib/sourceanalyzer.jar -Dsourceanalyzer.maxHeap=32G
        # cmd_7 = sourceanalyzer -b ${pig_jar_version} -Xmx48G -verbose -cp "./jars/*.jar" -source "1.7" "**/*.jsp" "**/*.xml" "**/*.js" "**/*.properties" "**/*.java"
        cmd_7 = sourceanalyzer -b ${pig_jar_version} -Xmx48G -verbose -cp "./jars/*.jar" -source "1.7" "src/**/*.java"
        cmd_8 = sourceanalyzer -b ${pig_jar_version} -Xmx48G -scan -f ${pig_jar_version}.fpr

    [[test_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} -Dant-task.version=2.1.3 test-core-mrtez

[hadoop]
build_tool = maven
PBLC_NODEJS_URL="https://nodejs.org/download/release/"
PBLC_NPM_URL="https://registry.npmjs.org/npm/-/"
AWS_S3_CMD="aws s3 cp "
COMMON_BUILD_OPTS = "${MVN_CMD} -Drequire.snappy=true -Dbundle.snappy=true -Dsnappy.prefix=x -Dsnappy.lib=${snappylib} -Dbundle.zstd=true -Drequire.zstd=true -Dzstd.lib=${zlib} -Pyarn-ui -Pdist -Pnative -Dtar -Psrc -Pgpg -Drequire.openssl=true -Dmaven.javadoc.skip=true -Dhbase.profile=2.0 -DnpmDownloadRoot=${PBLC_NPM_URL} -DnodeDownloadRoot=${PBLC_NODEJS_URL}"
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${hadoop_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -DskipTests -DskipITs deploy
coverage_tool = cobertura
FORTIFY_VERSION=17.20
FORTIFY_SCA_HOME="${TOOLS_HOME}/fortify_sca_17.20"
PATH=${GCC_HOME}/bin:${CMAKE_HOME}/bin:/opt/bin/:/bin/:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

    [[artifacts]]
        artifact_1 = hadoop-dist/target/hadoop-${hadoop_jar_version}.tar.gz
        artifact_2 = hadoop-client-modules/hadoop-client/target/hadoop-client-${hadoop_jar_version}.tar.gz
        artifact_3 = hadoop-hdfs-project/hadoop-hdfs/target/hadoop-hdfs-${hadoop_jar_version}.tar.gz
        artifact_4 = hadoop-hdfs-project/hadoop-hdfs-native-client/target/main/native/fuse-dfs/fuse_dfs

    [[download_modules]]
        cmd_1 = no_command, no_command

    [[install_cmd]]
        cmd_1 = bash -c "${AWS_S3_CMD} $(echo ${cdh_S3_DEV_LOC}/tars/isa_l/isal-${isa_l_jar_version}.tar.gz | sed -e 's/http/s3/' -e 's/.s3.amazonaws.com//') ${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}.tar.gz"
        cmd_2 = tar -zxf ${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}.tar.gz -C ${TMP_PACKAGES_DIR}
        cmd_3 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -Dcontainer-executor.additional_cflags='-std=c90' -DskipTests -DskipITs -Drequire.isal -Disal.lib=${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}/lib install
        cmd_4 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -DskipTests -DskipITs site:site

    [[fortify_cmd]]
        cmd_1 = tar -zxf ${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}.tar.gz -C ${TMP_PACKAGES_DIR}
        cmd_2 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -Dcontainer-executor.additional_cflags='-std=c90' -DskipTests -DskipITs -Drequire.isal -Disal.lib=${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}/lib install
        cmd_3 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -Dcontainer-executor.additional_cflags='-std=c90' -DskipTests -DskipITs -Drequire.isal -Disal.lib=${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}/lib -Dfortify.sca.Xmx=48G -Dfortify.sca.Xss=400M -Dfortify.sca.sourceanalyzer.executable=${TOOLS_HOME}/fortify_sca_17.20/bin/sourceanalyzer -Dfortify.sca.source.version=1.8 -Dfortify.sca.cp=${MR_HOME}/repository -Dfortify.sca.buildId=hadoop-${hadoop_jar_version} ${FORTIFY_CLEAN_CMD}
        cmd_4 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -Dcontainer-executor.additional_cflags='-std=c90' -DskipTests -DskipITs -Drequire.isal -Disal.lib=${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}/lib -Dfortify.sca.Xmx=48G -Dfortify.sca.Xss=400M -Dfortify.sca.sourceanalyzer.executable=${TOOLS_HOME}/fortify_sca_17.20/bin/sourceanalyzer -Dfortify.sca.source.version=1.8 -Dfortify.sca.cp=${MR_HOME}/repository -Dfortify.sca.buildId=hadoop-${hadoop_jar_version} -Dfortify.sca.verbose=true -Dfortify.sca.translateLogfile=translate.log -Dfortify.sca.debug=true ${FORTIFY_TRANSLATE_CMD}
    	cmd_5 = sourceanalyzer -b hadoop-${hadoop_jar_version} ${FORTIFY_SCAN_LARGE_MEMORY} -scan -f hadoop-${hadoop_jar_version}.fpr


    [[test_cmd]]
        cmd_1 = ${MVN_CMD} test

    [[test_coverage_cmd]]
        cmd_1 = ${MVN_CMD} cobertura:cobertura

    [[text-replace]]
        REPLACE_1 = "\$\{cdh.logredactor.version\}", "2.0.7", hadoop-common-project/hadoop-common/pom.xml, regex_replace
        REPLACE_2 = '<module>hadoop-mapreduce-client-nativetask</module>', '', hadoop-mapreduce-project/hadoop-mapreduce-client/pom.xml , regex_replace


    [[xml-replace]]
        REPLACE_1 = 'forkedProcessTimeoutInSeconds', '1800' , hadoop-project/pom.xml
        REPLACE_2 = 'forkedProcessTimeoutInSeconds', '1800' , hadoop-tools/hadoop-distcp/pom.xml
        REPLACE_3 = 'argLine', '-Xms2048m -Xmx3072m -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError', hadoop-project/pom.xml
        REPLACE_4 = 'argLine', '-Xms2048m -Xmx3072m -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError', hadoop-tools/hadoop-distcp/pom.xml
        REPLACE_5 = 'zookeeper.version', ${zookeeper_jar_version}, pom.xml
        REPLACE_7 = 'gcs.version' , ${gcs_jar_version} , hadoop-project/pom.xml
        REPLACE_8 = 'hadoop.version', ${hadoop_jar_version}, pom.xml
        REPLACE_9 = 'hadoop.assemblies.version', ${hadoop_jar_version}, hadoop-project/pom.xml
        REPLACE_10 = 'knox.version', ${knox_lkgb_jar_version}, hadoop-project/pom.xml
        REPLACE_11 = 'hbase.two.version', ${hbase_lkgb_jar_version}, hadoop-project/pom.xml
        REPLACE_12 = 'avro.version', ${avro_lkgb_jar_version}, hadoop-project/pom.xml
        REPLACE_13 = 'ranger.version', ${ranger_lkgb_jar_version}, hadoop-project/pom.xml
        REPLACE_14 = 'curator.version', ${curator_jar_version} , hadoop-project/pom.xml
        REPLACE_15 = 'commons-beanutils.version', ${cdpd_commons-beanutils_version}, hadoop-project/pom.xml
        REPLACE_16 = 'commons-compress.version', ${cdpd_commons-compress_version}, hadoop-project/pom.xml
        REPLACE_17 = 'commons-daemon.version', ${cdpd_commons-daemon_version}, hadoop-project/pom.xml
        REPLACE_18 = 'commons-io.version', ${cdpd_commons-io_version}, hadoop-project/pom.xml
        REPLACE_19 = 'commons-lang3.version', ${cdpd_commons-lang3_version}, hadoop-project/pom.xml
        REPLACE_20 = 'gson.version', ${cdpd_gson_version}, hadoop-project/pom.xml
        REPLACE_21 = 'jackson.version', ${cdpd_jackson_version}, hadoop-project/pom.xml
        REPLACE_22 = 'jackson2.version', ${cdpd_jackson2_version}, hadoop-project/pom.xml
        REPLACE_23 = 'jackson2.databind.version', ${cdpd_jackson-databind2_version}, hadoop-project/pom.xml
        REPLACE_24 = 'jetty.version', ${cdpd_jetty_version}, hadoop-project/pom.xml
        REPLACE_25 = 'joda-time.version', ${cdpd_joda-time_version}, hadoop-project/pom.xml
        REPLACE_26 = 'kerby.version', ${cdpd_kerby_version}, hadoop-project/pom.xml
        REPLACE_27 = 'netty3.version', ${cdpd_netty3_version}, hadoop-project/pom.xml
        REPLACE_28 = 'netty4.version', ${cdpd_netty4_version}, hadoop-project/pom.xml
        REPLACE_29 = 'protobuf.version', ${cdpd_protobuf2_version}, hadoop-project/pom.xml
        REPLACE_30 = 're2j.version', ${cdpd_re2j_version}, hadoop-project/pom.xml
        REPLACE_31 = 'slf4j.version', ${cdpd_slf4j_version}, hadoop-project/pom.xml

        REPLACE_32 = *[artifactId='httpclient']/version , ${cdpd_httpclient_version}, hadoop-project/pom.xml
        REPLACE_33 = *[artifactId='httpcore']/version , ${cdpd_httpcore_version}, hadoop-project/pom.xml

[knox]
build_tool = maven
NPM_REPO_URL = "https://nodejs.org/download/release"
COMMON_BUILD_OPTS = "${MVN_CMD}  -Ppackage,release,idbroker -DskipCheck=true -Dcheckstyle.skip=true -Drepo.id=${NEXUS_DEPLOY_REPO_ID} -Dinternal.maven.repo=${NEXUS_REPO_URL} -DdownloadRoot=${NPM_REPO_URL}"
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${knox_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS}  deploy -DskipITs -DskipTests
package = 2
coverage_tool = cobertura

    [[artifacts]]
        artifact_1 = target/${knox_jar_version}/knox-${knox_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} install -DskipITs -DskipTests -Dmaven.javadoc.skip=true

    [[fortify_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} install -DskipITs -DskipTests -Dmaven.javadoc.skip=true
        cmd_2 = ${COMMON_BUILD_OPTS} -DskipITs -DskipTests -Dmaven.javadoc.skip=true ${FORTIFY_ARGS} -Dfortify.sca.buildId=knox-${knox_jar_version} ${FORTIFY_CLEAN_CMD}
        cmd_3 = ${COMMON_BUILD_OPTS} -DskipITs -DskipTests -Dmaven.javadoc.skip=true ${FORTIFY_ARGS} -Dfortify.sca.buildId=knox-${knox_jar_version} ${FORTIFY_TRANSLATE_CMD}
        cmd_4 = sourceanalyzer -b knox-${knox_jar_version} ${FORTIFY_SCAN_MEMORY} -scan -f knox-${knox_jar_version}.fpr

    [[test_cmd]]
        cmd_1 = "${MVN_CMD} -DskipTests=false -Ppackage,release,idbroker install"

    [[test_coverage_cmd]]
        cmd_1 = "${MVN_CMD} -DskipTests=false -Ppackage,release,idbroker cobertura:cobertura"

    [[xml-replace]]
    REPLACE_1 = 'gateway.version', ${knox_jar_version}, pom.xml
    REPLACE_2 = 'hadoop.version', ${hadoop_jar_version}, pom.xml
    REPLACE_3 = 'zookeeper.version', ${zookeeper_jar_version}, pom.xml
    REPLACE_4 = 'gcs.version', ${gcs_jar_version}, gateway-cloud-bindings/pom.xml
    REPLACE_5 = 'bigdataoss.version', ${gcs_jar_version}, gateway-cloud-bindings/pom.xml
    REPLACE_6 = 'downloadRoot', "https://nodejs.org/download/release/", gateway-admin-ui/pom.xml
    REPLACE_7 = 'curator.version', '${curator_jar_version}', pom.xml
    REPLACE_8 = 'jetty.version', '${cdpd_jetty_version}', pom.xml

[hadoop-lzo]
build_tool = maven
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${hadoop-lzo_jar_version}

    [[artifacts]]
        artifact_1 = target/hadoop-lzo-${hadoop-lzo_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = "wget -O ${BASE_DIR}/SOURCES/hadoop-lzo/src/main/native/config/config.guess http://dev.hortonworks.com.s3.amazonaws.com/REJENKINS/config.guess"
        cmd_2 = "${MVN_CMD} -Dversion=${hadoop-lzo_jar_version} -Dhadoop.version=${hadoop_jar_version} -Drepo.maven.org=${NEXUS_REPO_URL} -Dmvnrepo=${NEXUS_REPO_URL} clean install package -Dmaven.javadoc.skip=true"
        cmd_3 = "tar -zvcf hadoop-lzo-${hadoop-lzo_jar_version}.tar.gz native hadoop-lzo-${hadoop-lzo_jar_version}.jar  hadoop-lzo-${hadoop-lzo_jar_version}-sources.jar --exclude=native/Linux-amd64-64/src --exclude=native/Linux-amd64-64/.libs --exclude=native/Linux-amd64-64/impl --exclude=native/Linux-amd64-64/libgplcompression.la --exclude=native/Linux-amd64-64/Makefile --exclude=native/Linux-amd64-64/config.status --exclude=native/Linux-amd64-64/config.log --exclude=native/Linux-amd64-64/libtool" , target

    [[xml-replace]]
        REPLACE_1 = 'hadoop.current.version', ${hadoop_jar_version} , pom.xml

[solr]
COMPONENT = solr
build_tool = ant
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public
IVY_MIRROR_PROP = ${NEXUS_URL}
M2_REPO_SUFFIX = ""
BUILD_OPTS="-Dversion=${solr_jar_version} -Dslf4j.binding=slf4j-log4j12 -Dexclude.from.war=nothing -Divy.home=${HOME}/.ivy2 -Drepo.maven.org=${IVY_MIRROR_PROP} -Divy_bootstrap_url1=${IVY_MIRROR_PROP} -Divy_install_path=${HOME}/tools/ant/latest/lib -lib ${HOME}/tools/ant/latest/lib -Dreactor.repo=file://${HOME}/.m2/repository${M2_REPO_SUFFIX} -Dcauldron-gbn=${IVY_MIRROR_PROP}"

        [[artifacts]]
          cmd_1 = build/solr-${solr_jar_version}.tar.gz

        [[install_cmd]]
          cmd_1 = ant ${BUILD_OPTS} ivy-bootstrap
          cmd_2 = mkdir -p "test-framework/lib"
          cmd_3 = ant ${BUILD_OPTS} clean
          cmd_4 = ant ${BUILD_OPTS} package-local-src-tgz , solr
          cmd_5 = ant ${BUILD_OPTS} create-package , solr
          cmd_6 = ant ${BUILD_OPTS} -Dcontrib-crawl.exclude=contrib/depends-sentry-libs/build.xml -Dmaven-deps.exclude="**/depends-sentry-libs/**" generate-maven-artifacts
          cmd_7 = rm -rf build
          cmd_8 = mkdir build
          cmd_9 = tar --use-compress-program pigz -C build -xf ${COMPONENT}/build/${COMPONENT}-${solr_jar_version}-src.tgz
          cmd_10 = tar --use-compress-program pigz -C build/${COMPONENT}-${solr_jar_version} --strip-components=1 -xf ${COMPONENT}/package/${COMPONENT}-${solr_jar_version}.tgz
          cmd_11 = cp -rf cloudera build/${COMPONENT}-${solr_jar_version}
          cmd_13 = tar --use-compress-program pigz -cf ${COMPONENT}-${solr_jar_version}.tar.gz ${COMPONENT}-${solr_jar_version} , build

        [[text-replace]]
          cmd_1 = 'gcs.version' , ${gcs_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_2 = 'org.apache.hadoop.version' , ${hadoop_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_3 = 'org.apache.knox.version', ${knox_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_4 = 'org.apache.zookeeper.version' , ${zookeeper_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_5 = 'releases.cloudera.com' , ${GBN_MVN_REPO} , lucene/ivy-versions.properties , key_value
          cmd_6 = 'snapshots.cloudera.com', ${IVY_MIRROR_PROP} , lucene/ivy-versions.properties , key_value
          cmd_7 = 'reactor.repo', ${IVY_MIRROR_PROP} , lucene/ivy-versions.properties , key_value
          cmd_8 = 'org.eclipse.jetty.version', '${cdpd_jetty_version}', lucene/ivy-versions.properties , key_value
          cmd_9 = 'property name="cauldron-gbn" value=".*" override', 'property name="cauldron-gbn" value="${GBN_MVN_REPO}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_10 = 'property name="cauldron.cloudera.com" value=".*" override', 'property name="cauldron.cloudera.com" value="${GBN_MVN_REPO}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_11 = 'property name="reactor.repo" value=".*" override', 'property name="reactor.repo" value="${IVY_MIRROR_PROP}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_12 = 'property name="snapshots.cloudera.com" value=".*" override', 'property name="snapshots.cloudera.com" value="${IVY_MIRROR_PROP}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_13 = 'property name="releases.cloudera.com" value=".*" override', 'property name="releases.cloudera.com" value="${GBN_MVN_REPO}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_14 = 'ibiblio name="sonatype-releases" root=".*" m2compatible', 'ibiblio name="sonatype-releases" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_15 = 'ibiblio name="maven.restlet.org" root=".*" m2compatible', 'ibiblio name="maven.restlet.org" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_16 = 'ibiblio name="cloudera" root=".*" m2compatible', 'ibiblio name="cloudera" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_17 = 'ibiblio name="releases.cloudera.com" root=".*" m2compatible', 'ibiblio name="releases.cloudera.com" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_18 = 'ibiblio name="working-chinese-mirror" root=".*" m2compatible', 'ibiblio name="working-chinese-mirror" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_19 = 'property name="ivy_bootstrap_url1" value=".*"', 'property name="ivy_bootstrap_url1" value="${IVY_MIRROR_PROP}"', lucene/common-build.xml , regex_replace
          cmd_20 = 'property name="ivy_bootstrap_url2" value=".*"', 'property name="ivy_bootstrap_url2" value="${IVY_MIRROR_PROP}"', lucene/common-build.xml , regex_replace
          cmd_21 = 'io.netty.netty.version', ${cdpd_netty4_version}, lucene/ivy-versions.properties , key_value
          cmd_22 = 'org.apache.kerby.version', ${cdpd_kerby_version}, lucene/ivy-versions.properties , key_value
          cmd_23 = '/commons-cli/commons-cli', 1.2, lucene/ivy-versions.properties , key_value
          cmd_24 = '/commons-codec/commons-codec', ${cdpd_commons-codec_version}, lucene/ivy-versions.properties , key_value
          cmd_25 = '/commons-collections/commons-collections', ${cdpd_commons-collections_version}, lucene/ivy-versions.properties , key_value
          cmd_26 = '/commons-io/commons-io', ${cdpd_commons-io_version}, lucene/ivy-versions.properties , key_value
          cmd_27 = '/org.apache.commons/commons-lang3', ${cdpd_commons-lang3_version}, lucene/ivy-versions.properties , key_value
          cmd_28 = 'org.apache.curator.version', ${curator_jar_version}, lucene/ivy-versions.properties , key_value
          cmd_29 = '/org.apache.httpcomponents/httpclient', ${cdpd_httpclient_version}, lucene/ivy-versions.properties , key_value
          cmd_30 = '/org.apache.httpcomponents/httpcore', ${cdpd_httpcore_version}, lucene/ivy-versions.properties , key_value
          cmd_31 = 'org.codehaus.jackson.version', ${cdpd_jackson_version}, lucene/ivy-versions.properties , key_value
          cmd_32 = 'org.apache.logging.log4j.version', ${cdpd_log4j2_version}, lucene/ivy-versions.properties , key_value
          cmd_33 = '/com.google.re2j/re2j', ${cdpd_re2j_version}, lucene/ivy-versions.properties , key_value

       [[test_cmd]]
          cmd_1 = ant ${BUILD_OPTS} ivy-bootstrap resolve
          cmd_2 = ant ${BUILD_OPTS} clean test -Dtests.badapples=false -Dtests.jvms.override=2

[sqoop]
build_tool = ant
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public
COMMON_BUILD_OPTS = "${ANT_CMD} -Dmvn.version=2.1.3 -Dprev.git.hash=HEAD -Dtest.junit.output.format=xml -Dmvn.repo=${NEXUS_DEPLOY_REPO_ID} -Dmvn.repo.id=${NEXUS_DEPLOY_REPO_ID} -Dmvn.deploy.url=${GBN_MVN_REPO} -Drepo.maven.org=${GBN_MVN_REPO} -Dsnapshot.apache.org=${NEXUS_URL} -Dstaging.cloudera.com=${NEXUS_URL} -Dreleases.cloudera.com=${NEXUS_URL}"
deploy_cmd = ${COMMON_BUILD_OPTS} clean mvn-install mvn-deploy tar
package_count = 3
coverage_tool = cobertura

    [[artifacts]]
        artifact_1 = build/sqoop-${sqoop_jar_version}.bin__hadoop-${hadoop_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} clean mvn-install tar -Dmaven.javadoc.skip=true

    [[fortify_cmd]]
        cmd_1 = sourceanalyzer -b sqoop-${sqoop_jar_version} ${FORTIFY_SCAN_MEMORY} -verbose ${COMMON_BUILD_OPTS} clean mvn-install tar -Dmaven.javadoc.skip=true
        cmd_2 = sourceanalyzer -b sqoop-${sqoop_jar_version} ${FORTIFY_SCAN_MEMORY} -scan -f sqoop-${sqoop_jar_version}.fpr

    [[test_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} clean test tar -Dmvn.version=2.1.3

    [[test_coverage_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} clean cobertura:cobertura tar -Dmvn.version=2.1.3

    [[text-replace]]
        REPLACE_1 = 'version' , ${sqoop_jar_version} , ivy/libraries.properties , key_value
        REPLACE_2 = 'zookeeper.version' , ${zookeeper_jar_version} , ivy/libraries.properties , key_value
        REPLACE_3 = 'hadoop.version' , ${hadoop_jar_version} , ivy/libraries.properties , key_value
        REPLACE_4 = 'hbase.version' , ${hbase_jar_version} , ivy/libraries.properties , key_value
        REPLACE_5 = 'hcatalog.version' , ${hive_jar_version} , ivy/libraries.properties , key_value
        REPLACE_6 = 'accumulo.version' , ${accumulo_jar_version} , ivy/libraries.properties , key_value
        REPLACE_7 = 'orc.version' , ${orc_jar_version} , ivy/libraries.properties , key_value
        REPLACE_8 = 'avro.version' , ${avro_jar_version} , ivy/libraries.properties , key_value
        REPLACE_9 = 'parquet.version' , ${parquet_jar_version} , ivy/libraries.properties , key_value
        REPLACE_10 = 'calcite.version', ${calcite_jar_version}, ivy/libraries.properties , key_value

        REPLACE_11 = 'commons-cli.version', ${cdpd_commons-cli_version}, ivy/libraries.properties , key_value
        REPLACE_12 = 'commons-codec.version', ${cdpd_commons-codec_version}, ivy/libraries.properties , key_value
        REPLACE_13 = 'commons-collections.version', ${cdpd_commons-collections_version}, ivy/libraries.properties , key_value
        REPLACE_14 = 'commons-io.version', ${cdpd_commons-io_version}, ivy/libraries.properties , key_value
        REPLACE_15 = 'commons-lang.version', ${cdpd_commons-lang_version}, ivy/libraries.properties , key_value
        REPLACE_16 = 'commons-lang3.version', ${cdpd_commons-lang3_version}, ivy/libraries.properties , key_value
        REPLACE_17 = 'commons-logging.version', ${cdpd_commons-logging_version}, ivy/libraries.properties , key_value
        REPLACE_18 = 'commons-net.version', ${cdpd_commons-net_version}, ivy/libraries.properties , key_value
        REPLACE_19 = 'commons-pool.version', ${cdpd_commons-pool_version}, ivy/libraries.properties , key_value
        REPLACE_20 = 'jackson-databind.version', 2.10.0, ivy/libraries.properties , key_value
        REPLACE_21 = 'jersey.version', ${cdpd_jersey_version}, ivy/libraries.properties , key_value
        REPLACE_22 = 'jetty.version', ${cdpd_jetty_version}, ivy/libraries.properties , key_value
        REPLACE_23 = 'junit.version', ${cdpd_junit4_version}, ivy/libraries.properties , key_value
        REPLACE_24 = 'log4j.version', ${cdpd_log4j_version}, ivy/libraries.properties , key_value
        REPLACE_25 = 'log4j-2.version', 2.11.2, ivy/libraries.properties , key_value
        REPLACE_26 = 'kryo.version', ${cdpd_kryo3_version}, ivy/libraries.properties , key_value
        REPLACE_27 = 'mockito-all.version', 1.9.5, ivy/libraries.properties , key_value
        REPLACE_28 = 'slf4j.version', ${cdpd_slf4j_version}, ivy/libraries.properties , key_value

[spark_acid]
build_tool = sbt
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public
COMMON_BUILD_OPTS = "-Dversion=${spark_acid_jar_version} -Dspark.version=${spark_jar_version} -Dhadoop.version=${hadoop_jar_version} -Dhive.version=${hive_jar_version} -Dtez.version=${tez_jar_version} -Drepourl=${NEXUS_URL} -Dhive.repo=${NEXUS_URL} -Dgbnurl=${GBN_MVN_REPO} -Dthrift.version=0.9.3-1"

    [[artifacts]]
        artifact_1 = target/scala-2.11/spark-acid-assembly-${spark_acid_jar_version}.jar

    [[install_cmd]]
        cmd_1 = ../build/sbt clean publishLocal publishM2 ${COMMON_BUILD_OPTS} , shaded-dependencies
        cmd_2 = ./build/sbt clean assembly publishLocal publishM2 ${COMMON_BUILD_OPTS}

    [[text-replace]]
        REPLACE_1 = 'version in ThisBuild :=.*', 'version in ThisBuild := "${spark_acid_jar_version}"', version.sbt, regex_replace

[hive_warehouse_connector]
build_tool = sbt
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public
COMMON_OPTS = "-DskipTests -Dversion=${hive_warehouse_connector_jar_version} -Dspark.version=${spark_jar_version} -Dhadoop.version=${hadoop_jar_version} -Dhive.version=${hive_jar_version} -Dtez.version=${tez_jar_version} -Drepourl=${NEXUS_URL} -Dgbnurl=${NEXUS_URL} -Dspark.acid.version=${spark_acid_jar_version}"

    [[artifacts]]
        artifact_1 = target/scala-2.11/hive-warehouse-connector-assembly-${hive_warehouse_connector_jar_version}.jar
        artifact_2 = target/pyspark_hwc-${hive_warehouse_connector_jar_version}.zip

    [[install_cmd]]
        cmd_1 = ./build/sbt compile ${COMMON_OPTS}
        cmd_2 = ./build/sbt  assembly ${COMMON_OPTS}
        cmd_3 = ./build/sbt  publishM2 ${COMMON_OPTS}

    [[text-replace]]
        REPLACE_1 = 'version :=.*', 'version := "${hive_warehouse_connector_jar_version}"', build.sbt, regex_replace
        REPLACE_2 = 'https://dl.bintray.com/typesafe/ivy-releases', 'https://dl.bintray.com/typesafe/ivy-releases', build/sbt-launch-lib.bash, regex_replace

[streams_messaging_manager_ui]
build_tool = npm
node_version = 10.17.0
N_PREFIX = ${HOME}/tools/n
PATH=${N_PREFIX}/n/versions/node/${node_version}/bin:${PATH}

    [[artifacts]]
        artifact_1 = streams_messaging_manager_ui-${streams_messaging_manager_ui_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = bash -c "echo 'MODE="standalone"' > .env"
        cmd_2 = npm install
        cmd_3 = npm run build
        cmd_4 = npm run build-standalone-server
        cmd_5 = npm install node-linux-ppc64le@lts --prefix nodejs --force
        cmd_6 = mv nodejs/node_modules/node-linux-ppc64le nodejs/node_modules/node
        cmd_7 = npm install forever --prefix nodejs/node_modules/node
        cmd_8 = mv nodejs/node_modules/node prod-server/dist/
        cmd_9 = tar -C prod-server/dist -czvf streams_messaging_manager_ui-${streams_messaging_manager_ui_jar_version}.tar.gz .

[tez]
PBLC_NODEJS_URL="https://nodejs.org/download/release/"
PBLC_NPM_URL="https://registry.npmjs.org/npm/-/"
build_tool = maven
COMMON_BUILD_OPTS = "${MVN_CMD} clean ${MAVEN_TEST_OPTS} -Dtar -Pgpg -Paws -Pazure -Pozone -Pgcs -Phadoop28 -Psources -Dhadoop.version=${hadoop_jar_version} -Drepoid=${NEXUS_DEPLOY_REPO_ID} -Dreponame=${NEXUS_DEPLOY_REPO_ID} -Dinternal.maven.repository=${NEXUS_REPO_URL} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -DnpmDownloadRoot=${PBLC_NPM_URL} -DnodeDownloadRoot=${PBLC_NODEJS_URL}"
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${tez_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS} deploy
package_count = 2
coverage_tool = cobertura

    [[artifacts]]
        artifact_1 = tez-dist/target/tez-${tez_jar_version}-minimal.tar.gz
        artifact_2 = tez-dist/target/tez-${tez_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} install -DskipTests

    [[fortify_cmd]]
        cmd_1 = "${COMMON_BUILD_OPTS} -DskipITs -DskipTests install"
        cmd_2 = ${COMMON_BUILD_OPTS} -DskipTests -DskipITs -Dmaven.javadoc.skip=true ${FORTIFY_ARGS} -Dfortify.sca.buildId=tez-${tez_jar_version} ${FORTIFY_CLEAN_CMD}
        cmd_3 = ${COMMON_BUILD_OPTS} -DskipTests -DskipITs -Dmaven.javadoc.skip=true ${FORTIFY_ARGS} -Dfortify.sca.buildId=tez-${tez_jar_version} ${FORTIFY_TRANSLATE_CMD}
        cmd_4 = sourceanalyzer -b tez-${tez_jar_version} ${FORTIFY_SCAN_MEMORY} -scan -f tez-${tez_jar_version}.fpr

    [[test_cmd]]
        cmd_1 = npm set strict-ssl false ; ${MVN_CMD} test


    [[test_coverage_cmd]]
        cmd_1 = npm set strict-ssl false ; ${MVN_CMD} cobertura:cobertura

    [[xml-replace]]
        REPLACE_1 = 'hadoop.version', ${hadoop_jar_version}, pom.xml
        REPLACE_2 = 'zookeeper.version', ${zookeeper_jar_version}, pom.xml
        REPLACE_3 = 'gcs.version' , ${gcs_jar_version} , pom.xml
        REPLACE_4 = 'ozone.version' , ${ozone_jar_version} , pom.xml

        REPLACE_5 = 'curator.version' , ${curator_jar_version} , pom.xml

[atlas]
build_tool = maven
atlas_alternate_name = apache-atlas
hbase_pkg_version = 1.1.2
solr_pkg_version = 5.1.0
PBLC_NODEJS_URL="https://nodejs.org/download/release/"
PBLC_NPM_URL="https://registry.npmjs.org/npm/-/"
COMMON_BUILD_OPTS = "${MVN352_CMD} -Dfindbugs.skip=true -Pgpg -DskipDocs=true -Dhadoop.version=${hadoop_jar_version} -Dzookeeper.version=${zookeeper_jar_version} -Dinternal.maven.repository=${NEXUS_REPO_URL} -DStagingId=${NEXUS_DEPLOY_REPO_ID} -DStagingUrl=${NEXUS_REPO_URL} -Dhbase.tar=http://public-repo-1.hortonworks.com/ARTIFACTS/dist/hbase/${hbase_pkg_version}/hbase-${hbase_pkg_version}-bin.tar.gz -Dsolr.tar=http://public-repo-1.hortonworks.com/ARTIFACTS/dist/lucene/solr/${solr_pkg_version}/solr-${solr_pkg_version}.tgz -DnpmDownloadRoot=${PBLC_NPM_URL} -DnodeDownloadRoot=${PBLC_NODEJS_URL}"
setversion_cmd = ${MVN352_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${atlas_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS} -Pdist -DskipTests -DskipITs deploy assembly:assembly
package_count = 3
coverage_tool = cobertura

    [[artifacts]]
        artifact_1 = distro/target/${atlas_alternate_name}-${atlas_jar_version}-bin.tar.gz
        artifact_2 = distro/target/${atlas_alternate_name}-${atlas_jar_version}-hbase-hook.tar.gz
        artifact_4 = distro/target/${atlas_alternate_name}-${atlas_jar_version}-sqoop-hook.tar.gz
        artifact_5 = distro/target/${atlas_alternate_name}-${atlas_jar_version}-kafka-hook.tar.gz
        artifact_6 = distro/target/${atlas_alternate_name}-${atlas_jar_version}-hive-hook.tar.gz
        artifact_7 = distro/target/${atlas_alternate_name}-${atlas_jar_version}-server.tar.gz
        artifact_8 = distro/target/${atlas_alternate_name}-${atlas_jar_version}-impala-hook.tar.gz

    [[install_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} -Pdist -DskipTests -DskipITs install

            [[test_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} --fail-at-end -Dsurefire.timeout=1200 -DfailIfNoTests=false test

    [[test_coverage_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} --fail-at-end -Dsurefire.timeout=1200 -DfailIfNoTests=false cobertura:cobertura

    [[fortify_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} -Pdist -DskipTests -DskipITs install
        cmd_2 = ${COMMON_BUILD_OPTS} -Pdist -DskipTests -DskipITs ${FORTIFY_ARGS} -Dfortify.sca.buildId=${atlas_alternate_name}-${atlas_jar_version} ${FORTIFY_CLEAN_CMD}
        cmd_3 = ${COMMON_BUILD_OPTS} -Pdist -DskipTests -DskipITs ${FORTIFY_ARGS} -Dfortify.sca.buildId=${atlas_alternate_name}-${atlas_jar_version} ${FORTIFY_TRANSLATE_CMD}
        cmd_4 = sourceanalyzer -b ${atlas_alternate_name}-${atlas_jar_version} ${FORTIFY_SCAN_MEMORY} -scan -f ${atlas_alternate_name}-${atlas_jar_version}.fpr

    [[text-replace]]
        REPLACE_1 = '0.8-incubating-SNAPSHOT', ${atlas_jar_version}, build-tools/pom.xml , regex_replace

    [[xml-replace]]
        REPLACE_1 = 'hadoop.version' , ${hadoop_jar_version} , pom.xml
        REPLACE_2 = 'hive.version' , ${hive_jar_version} , pom.xml
        REPLACE_3 = 'calcite.version', ${calcite_jar_version} , pom.xml
        REPLACE_4 = 'zookeeper.version' , ${zookeeper_jar_version} , pom.xml
        REPLACE_5 = 'hbase.version' , ${hbase_jar_version} , pom.xml
        REPLACE_6 = 'kafka.version', ${kafka_jar_version} , pom.xml

        #REPLACE_7 = 'curator.version', ${curator_jar_version} , pom.xml
        #REPLACE_8 = 'jetty.version', ${cdpd_jetty_version} , pom.xml

[kafka]
build_tool = gradle
COMMON_BUILD_OPTS = "{GRADLE_CMD} ${GRADLE_OPTS} "
deploy_cmd = ${COMMON_BUILD_OPTS} deploy
kafka_scala_version = 2.11
kafka_scala_version_compile = 2.11.12
package_count = 2
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public

BUILD_KAFKA_SETVERSION_OPTS = "-Pversion=${kafka_jar_version}"
BUILD_KAFKA_OPTS = "${BUILD_KAFKA_SETVERSION_OPTS}"
BUILD_KAFKA_DOC_OPTS = "${BUILD_KAFKA_OPTS} docsJar"
BUILD_KAFKA_INSTALL_OPTS = "${BUILD_KAFKA_OPTS} clean jar"
BUILD_KAFKA_EXAMPLES_INSTALL_OPTS = "${BUILD_KAFKA_OPTS} examples:jar"
BUILD_KAFKA_DEPLOY_OPTS = "${BUILD_KAFKA_OPTS} releaseTarGz"
BUILD_KAFKA_TEST_OPTS = "${BUILD_KAFKA_OPTS} cleanTest testWithFlakyRetry -PrepoUrl=${NEXUS_URL} -Pgbnurl=${GBN_MVN_REPO}"
BUILD_KAFKA_UPLOAD = "${BUILD_KAFKA_SETVERSION_OPTS} installAll"

    [[artifacts]]
        artifact_1 = core/build/distributions/kafka_${kafka_scala_version}-${kafka_jar_version}.tgz
        artifact_2 = kafka.tar.gz

    [[install_cmd]]
        cmd_2 = ./gradlew ${BUILD_KAFKA_INSTALL_OPTS}
        cmd_3 = ./gradlew ${BUILD_KAFKA_DOC_OPTS}
        cmd_4 = ./gradlew ${BUILD_KAFKA_EXAMPLES_INSTALL_OPTS}
        cmd_6 = ./gradlew ${BUILD_KAFKA_DEPLOY_OPTS}
        cmd_7 = ./gradlew ${BUILD_KAFKA_UPLOAD}
        cmd_10 =  "tar -zcvf kafka.tar.gz core/build/docs NOTICE LICENSE"

   [[test_cmd]]
        cmd_1 = ./gradlew ${BUILD_KAFKA_TEST_OPTS}

   [[fortify_cmd]]
        # TO DO Replace gradlew PATH. For now hard coding the path.
        cmd_2 = sourceanalyzer -b kafka-${kafka_jar_version} -source "1.7" ${SOURCE_ROOT}/kafka/gradlew ${BUILD_KAFKA_INSTALL_OPTS}
        cmd_3 = sourceanalyzer -b kafka-${kafka_jar_version} -source "1.7" ${SOURCE_ROOT}/kafka/gradlew ${BUILD_KAFKA_DOC_OPTS}
        cmd_4 = sourceanalyzer -b kafka-${kafka_jar_version} -source "1.7" ${SOURCE_ROOT}/kafka/gradlew ${BUILD_KAFKA_EXAMPLES_INSTALL_OPTS}
        cmd_6 = sourceanalyzer -b kafka-${kafka_jar_version} ${FORTIFY_SCAN_MEMORY} -scan -f kafka-${kafka_jar_version}.fpr

   [[text-replace]]
        REPLACE_1 = 'scalaVersion', ${kafka_scala_version_compile}, gradle.properties , key_value
        REPLACE_2 = 'version', ${kafka_jar_version}, gradle.properties , key_value
        REPLACE_3 = 'zookeeperVersion', ${zookeeper_jar_version}, gradle.properties , key_value
        REPLACE_4 = 'mavenUrl', ${NEXUS_URL}, gradle.properties , key_value
        REPLACE_5 = 'gbnUrl', ${NEXUS_URL}, gradle.properties , key_value

        REPLACE_6 = 'jetty', ${cdpd_jetty_version}, gradle/dependencies.gradle , key_value

[streams_replication_manager]
buid_tool = gradle
PATH=${TOOLS_HOME}/gradle/gradle-5.0/bin:${PATH}
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public

    [[install_cmd]]
         cmd_1 = gradle wrapper
         cmd_2 = ./gradlew build

    [[artifacts]]
        artifact_1 = build/distributions/streams-replication-manager-${streams_replication_manager_jar_version}.tgz
        artifact_2 = build/distributions/streams-replication-manager-${streams_replication_manager_jar_version}.zip

    [[text-replace]]
        replace_1 = 'version', "${streams_replication_manager_jar_version}", gradle.properties, key_value
        replace_2 = 'apacheVersion', "${streams_replication_manager_apache_version}", gradle.properties, key_value
        replace_3 = 'stackVersion', "${STACKVERSION}", gradle.properties, key_value
        replace_4 = 'buildNumber', "${BUILDNUMBER}", gradle.properties, key_value
        replace_5 = 'kafkaVersion', "${kafka_jar_version}", gradle.properties, key_value
        replace_6 = 'mavenUrl', ${NEXUS_URL}, gradle.properties, key_value
        replace_7 = 'gbnUrl', ${NEXUS_URL}, gradle.properties, key_value

[cruise_control]
buid_tool = gradle
PATH=${TOOLS_HOME}/gradle/gradle-5.0/bin:${PATH}
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public

    [[install_cmd]]
         cmd_1 = gradle wrapper
         cmd_2 = ./gradlew distTar

    [[artifacts]]
        artifact_1 = build/distributions/CRUISE_CONTROL_2.11-${cruise_control_jar_version}.tgz

    [[text-replace]]
        replace_1 = 'mavenUrl', ${NEXUS_URL}, gradle.properties, key_value
        replace_2 = 'gbnUrl', ${NEXUS_URL}, gradle.properties, key_value
        replace_3 = 'cdpProjectVersion', ${cruise_control_jar_version}, gradle.properties, key_value
        replace_4 = 'zookeeperVersion', ${zookeeper_jar_version}, gradle.properties, key_value
        replace_5 = 'kafkaVersion', ${kafka_jar_version}, gradle.properties, key_value

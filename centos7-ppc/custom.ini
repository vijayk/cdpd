[pig]
build_tool = ant
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public
COMMON_BUILD_OPTS = "${ANT_CMD} -Djavac.version=1.7 -Dversion=${pig_jar_version} -Dzookeeper.version=${zookeeper_jar_version} -Dhive.version=${hive_jar_version} -Dtez.version=${tez_jar_version} -Daccumulo15.version=${accumulo_jar_version} -Dhbase2.version=${hbase_jar_version} -Dhadoop-common.version=${hadoop_jar_version} -Dhadoop-hdfs.version=${hadoop_jar_version} -Dhadoop-mapreduce.version=${hadoop_jar_version} -Dtest.junit.output.format=xml -Dforrest.home=${FORREST_HOME} -Dhadoopversion=23 -Dorc.version=${orc_jar_version} -Dmvnrepo=${NEXUS_URL} -Drepo.apache.snapshots=${NEXUS_URL} -Drepo.jboss.org=${GBN_MVN_REPO}"
deploy_cmd = ${COMMON_BUILD_OPTS} -f nexus-build.xml -Dstaging_repo_id=${NEXUS_DEPLOY_REPO_ID} -Dasfstagingrepo=${NEXUS_URL} stage
BUILD_PIG_COMPILE_JAR="${COMMON_BUILD_OPTS} very-clean jar pigunit-jar smoketests-jar compile-test"

    [[artifacts]]
        artifact_1 = build/pig-${pig_jar_version}.tar.gz
        artifact_2 = pig.tar.gz
        artifact_3 = build/pig-${pig_jar_version}-smoketests.jar

    [[install_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} mvn-install
        cmd_2 = ${COMMON_BUILD_OPTS} very-clean jar pigunit-jar smoketests-jar compile-test
        cmd_3 = ${COMMON_BUILD_OPTS} -buildfile contrib/piggybank/java/build.xml clean jar
        cmd_4 = ${COMMON_BUILD_OPTS} -Dant-task.version=2.1.3 tar
        cmd_5 = "tar -cz --exclude-vcs --transform 's,^build\/tar\/pig-${pig_jar_version}\/,pig/,' -f pig.tar.gz build/tar/pig-${pig_jar_version}"

    [[fortify_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} mvn-install
        cmd_2 = ${COMMON_BUILD_OPTS} very-clean jar pigunit-jar smoketests-jar compile-test
        cmd_3 = ${COMMON_BUILD_OPTS} -buildfile contrib/piggybank/java/build.xml clean jar
        cmd_4 = ${COMMON_BUILD_OPTS} -Dant-task.version=2.1.3 tar
        cmd_5 = "tar -cz --exclude-vcs --transform 's,^build\/tar\/pig-${pig_jar_version}\/,pig/,' -f pig.tar.gz build/tar/pig-${pig_jar_version}"
        cmd_6 = ${COMMON_BUILD_OPTS} -Dbuild.compiler=com.fortify.dev.ant.SCACompiler -Dsourceanalyzer.buildid=${pig_jar_version} -lib ${FORTIFY_SCA_HOME}/Core/lib/sourceanalyzer.jar -Dsourceanalyzer.maxHeap=32G
        # cmd_7 = sourceanalyzer -b ${pig_jar_version} -Xmx48G -verbose -cp "./jars/*.jar" -source "1.7" "**/*.jsp" "**/*.xml" "**/*.js" "**/*.properties" "**/*.java"
        cmd_7 = sourceanalyzer -b ${pig_jar_version} -Xmx48G -verbose -cp "./jars/*.jar" -source "1.7" "src/**/*.java"
        cmd_8 = sourceanalyzer -b ${pig_jar_version} -Xmx48G -scan -f ${pig_jar_version}.fpr

    [[test_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} -Dant-task.version=2.1.3 test-core-mrtez

[solr]
COMPONENT = solr
build_tool = ant
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public
IVY_MIRROR_PROP = ${NEXUS_URL}
M2_REPO_SUFFIX = ""
BUILD_OPTS="-Dversion=${solr_jar_version} -Dslf4j.binding=slf4j-log4j12 -Dexclude.from.war=nothing -Divy.home=${HOME}/.ivy2 -Drepo.maven.org=${IVY_MIRROR_PROP} -Divy_bootstrap_url1=${IVY_MIRROR_PROP} -Divy_install_path=${HOME}/tools/ant/latest/lib -lib ${HOME}/tools/ant/latest/lib -Dreactor.repo=file://${HOME}/.m2/repository${M2_REPO_SUFFIX} -Dcauldron-gbn=${IVY_MIRROR_PROP}"

        [[artifacts]]
          cmd_1 = build/solr-${solr_jar_version}.tar.gz

        [[install_cmd]]
          cmd_1 = ant ${BUILD_OPTS} ivy-bootstrap
          cmd_2 = mkdir -p "test-framework/lib"
          cmd_3 = ant ${BUILD_OPTS} clean
          cmd_4 = ant ${BUILD_OPTS} package-local-src-tgz , solr
          cmd_5 = ant ${BUILD_OPTS} create-package , solr
          cmd_6 = ant ${BUILD_OPTS} -Dcontrib-crawl.exclude=contrib/depends-sentry-libs/build.xml -Dmaven-deps.exclude="**/depends-sentry-libs/**" generate-maven-artifacts
          cmd_7 = rm -rf build
          cmd_8 = mkdir build
          cmd_9 = tar --use-compress-program pigz -C build -xf ${COMPONENT}/build/${COMPONENT}-${solr_jar_version}-src.tgz
          cmd_10 = tar --use-compress-program pigz -C build/${COMPONENT}-${solr_jar_version} --strip-components=1 -xf ${COMPONENT}/package/${COMPONENT}-${solr_jar_version}.tgz
          cmd_11 = cp -rf cloudera build/${COMPONENT}-${solr_jar_version}
          cmd_13 = tar --use-compress-program pigz -cf ${COMPONENT}-${solr_jar_version}.tar.gz ${COMPONENT}-${solr_jar_version} , build


        [[text-replace]]
          cmd_1 = 'gcs.version' , ${gcs_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_2 = 'hadoop.version' , ${hadoop_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_3 = 'org.apache.knox.version', ${knox_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_4 = 'org.apache.zookeeper.version' , ${zookeeper_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_5 = 'releases.cloudera.com' , ${GBN_MVN_REPO} , lucene/ivy-versions.properties , key_value
          cmd_6 = 'snapshots.cloudera.com', ${IVY_MIRROR_PROP} , lucene/ivy-versions.properties , key_value
          cmd_7 = 'reactor.repo', ${IVY_MIRROR_PROP} , lucene/ivy-versions.properties , key_value
          cmd_8 = 'org.eclipse.jetty.version', '9.3.27.v20190418', lucene/ivy-versions.properties , key_value
          cmd_9 = 'property name="cauldron-gbn" value=".*" override', 'property name="cauldron-gbn" value="${GBN_MVN_REPO}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_10 = 'property name="cauldron.cloudera.com" value=".*" override', 'property name="cauldron.cloudera.com" value="${GBN_MVN_REPO}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_11 = 'property name="reactor.repo" value=".*" override', 'property name="reactor.repo" value="${IVY_MIRROR_PROP}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_12 = 'property name="snapshots.cloudera.com" value=".*" override', 'property name="snapshots.cloudera.com" value="${IVY_MIRROR_PROP}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_13 = 'property name="releases.cloudera.com" value=".*" override', 'property name="releases.cloudera.com" value="${GBN_MVN_REPO}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_14 = 'ibiblio name="sonatype-releases" root=".*" m2compatible', 'ibiblio name="sonatype-releases" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_15 = 'ibiblio name="maven.restlet.org" root=".*" m2compatible', 'ibiblio name="maven.restlet.org" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_16 = 'ibiblio name="cloudera" root=".*" m2compatible', 'ibiblio name="cloudera" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_17 = 'ibiblio name="releases.cloudera.com" root=".*" m2compatible', 'ibiblio name="releases.cloudera.com" root="${GBN_MVN_REPO}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_18 = 'ibiblio name="working-chinese-mirror" root=".*" m2compatible', 'ibiblio name="working-chinese-mirror" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_19 = 'property name="ivy_bootstrap_url1" value=".*"', 'property name="ivy_bootstrap_url1" value="${IVY_MIRROR_PROP}"', lucene/common-build.xml , regex_replace
          cmd_20 = 'property name="ivy_bootstrap_url2" value=".*"', 'property name="ivy_bootstrap_url2" value="${IVY_MIRROR_PROP}"', lucene/common-build.xml , regex_replace

    [[test_cmd]]
        cmd_1 = ant ${BUILD_OPTS} ivy-bootstrap resolve
        cmd_2 = ant ${BUILD_OPTS} clean test -Dtests.badapples=false -Dtests.jvms.override=2

[hadoop]
build_tool = maven
COMMON_BUILD_OPTS = "${MVN_CMD} -Drequire.snappy=true -Dbundle.snappy=true -Dsnappy.prefix=x -Dsnappy.lib=${snappylib} -Dbundle.zstd=true -Drequire.zstd=true -Dzstd.lib=${zlib} -Pyarn-ui -Pdist -Pnative -Dtar -Psrc -Pgpg -Drequire.openssl=true -Dmaven.javadoc.skip=true -Dhbase.profile=2.0"
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${hadoop_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -DskipTests -DskipITs deploy
coverage_tool = cobertura
FORTIFY_VERSION=17.20
FORTIFY_SCA_HOME="${TOOLS_HOME}/fortify_sca_17.20"
PATH=${GCC_HOME}/bin:${CMAKE_HOME}/bin:/opt/bin/:/bin/:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

    [[artifacts]]
        artifact_1 = hadoop-dist/target/hadoop-${hadoop_jar_version}.tar.gz
        artifact_2 = hadoop-client-modules/hadoop-client/target/hadoop-client-${hadoop_jar_version}.tar.gz
        artifact_3 = hadoop-hdfs-project/hadoop-hdfs/target/hadoop-hdfs-${hadoop_jar_version}.tar.gz
        artifact_4 = hadoop-hdfs-project/hadoop-hdfs-native-client/target/main/native/fuse-dfs/fuse_dfs

    [[download_modules]]
        cmd_1 = ${cdh_S3_DEV_LOC}/tars/isa_l/isal-${isa_l_jar_version}.tar.gz, ${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = tar -zxf ${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}.tar.gz -C ${TMP_PACKAGES_DIR}
        cmd_2 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -Dcontainer-executor.additional_cflags='-std=c90' -DskipTests -DskipITs -Drequire.isal -Disal.lib=${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}/lib install
        cmd_3 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -DskipTests -DskipITs site:site

    [[fortify_cmd]]
        cmd_1 = tar -zxf ${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}.tar.gz -C ${TMP_PACKAGES_DIR}
        cmd_2 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -Dcontainer-executor.additional_cflags='-std=c90' -DskipTests -DskipITs -Drequire.isal -Disal.lib=${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}/lib install
        cmd_3 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -Dcontainer-executor.additional_cflags='-std=c90' -DskipTests -DskipITs -Drequire.isal -Disal.lib=${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}/lib -Dfortify.sca.Xmx=48G -Dfortify.sca.Xss=400M -Dfortify.sca.sourceanalyzer.executable=${TOOLS_HOME}/fortify_sca_17.20/bin/sourceanalyzer -Dfortify.sca.source.version=1.8 -Dfortify.sca.cp=${MR_HOME}/repository -Dfortify.sca.buildId=hadoop-${hadoop_jar_version} ${FORTIFY_CLEAN_CMD}
        cmd_4 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -Dcontainer-executor.additional_cflags='-std=c90' -DskipTests -DskipITs -Drequire.isal -Disal.lib=${TMP_PACKAGES_DIR}/isal-${isa_l_jar_version}/lib -Dfortify.sca.Xmx=48G -Dfortify.sca.Xss=400M -Dfortify.sca.sourceanalyzer.executable=${TOOLS_HOME}/fortify_sca_17.20/bin/sourceanalyzer -Dfortify.sca.source.version=1.8 -Dfortify.sca.cp=${MR_HOME}/repository -Dfortify.sca.buildId=hadoop-${hadoop_jar_version} -Dfortify.sca.verbose=true -Dfortify.sca.translateLogfile=translate.log -Dfortify.sca.debug=true ${FORTIFY_TRANSLATE_CMD}
        cmd_5 = sourceanalyzer -b hadoop-${hadoop_jar_version} ${FORTIFY_SCAN_LARGE_MEMORY} -scan -f hadoop-${hadoop_jar_version}.fpr

    [[test_cmd]]
        cmd_1 = ${MVN_CMD} test

    [[test_coverage_cmd]]
        cmd_1 = ${MVN_CMD} cobertura:cobertura

    [[text-replace]]
        REPLACE_1 = "\$\{cdh.logredactor.version\}", "2.0.7", hadoop-common-project/hadoop-common/pom.xml, regex_replace
        REPLACE_2 = '<module>hadoop-mapreduce-client-nativetask</module>', '', hadoop-mapreduce-project/hadoop-mapreduce-client/pom.xml , regex_replace


    [[xml-replace]]
        REPLACE_1 = 'forkedProcessTimeoutInSeconds', '1800' , hadoop-project/pom.xml
        REPLACE_2 = 'forkedProcessTimeoutInSeconds', '1800' , hadoop-tools/hadoop-distcp/pom.xml
        REPLACE_3 = 'argLine', '-Xms2048m -Xmx3072m -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError', hadoop-project/pom.xml
        REPLACE_4 = 'argLine', '-Xms2048m -Xmx3072m -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError', hadoop-tools/hadoop-distcp/pom.xml
        REPLACE_5 = 'zookeeper.version', ${zookeeper_jar_version} , pom.xml
        REPLACE_7 = 'gcs.version' , ${gcs_jar_version} , hadoop-project/pom.xml
        REPLACE_8 = 'hadoop.version', ${hadoop_jar_version}, pom.xml
        REPLACE_9 = 'hadoop.assemblies.version', ${hadoop_jar_version}, hadoop-project/pom.xml
        REPLACE_10 = 'knox.version', ${knox_lkgb_jar_version} , hadoop-project/pom.xml
        REPLACE_11 = 'hbase.two.version', ${hbase_jar_version}, hadoop-project/pom.xml
        REPLACE_12 = 'avro.version', ${avro_jar_version}, hadoop-project/pom.xml

        REPLACE_13 = 'curator.version', ${cdpd_curator_version} , hadoop-project/pom.xml
        REPLACE_14 = 'commons-beanutils.version', ${cdpd_commons-beanutils_version} , hadoop-project/pom.xml
        REPLACE_15 = 'commons-compress.version', ${cdpd_commons-compress_version} , hadoop-project/pom.xml
        REPLACE_16 = 'commons-daemon.version', ${cdpd_commons-daemon_version} , hadoop-project/pom.xml
        REPLACE_17 = 'commons-io.version', ${cdpd_commons-io_version} , hadoop-project/pom.xml
        REPLACE_18 = 'commons-lang3.version', ${cdpd_commons-lang3_version} , hadoop-project/pom.xml
        REPLACE_19 = 'gson.version', ${cdpd_gson_version} , hadoop-project/pom.xml
        REPLACE_20 = 'jackson.version', ${cdpd_jackson_version} , hadoop-project/pom.xml
        REPLACE_21 = 'jackson2.version', ${cdpd_jackson2_version} , hadoop-project/pom.xml
        REPLACE_22 = 'jackson2-databind.version', ${cdpd_jackson-databind2_version} , hadoop-project/pom.xml
        REPLACE_23 = 'jetty.version', ${cdpd_jetty_version} , hadoop-project/pom.xml
        REPLACE_24 = 'joda-time.version', ${cdpd_joda-time_version} , hadoop-project/pom.xml
        REPLACE_25 = 'kerby.version', ${cdpd_kerby_version} , hadoop-project/pom.xml
        REPLACE_25 = 'netty3.version', ${cdpd_netty3_version} , hadoop-project/pom.xml
        REPLACE_27 = 'netty4.version', ${cdpd_netty4_version} , hadoop-project/pom.xml
        REPLACE_28 = 'protobuf.version', ${cdpd_protobuf2_version} , hadoop-project/pom.xml
        REPLACE_29 = 're2j.version', ${cdpd_re2j_version} , hadoop-project/pom.xml
        REPLACE_30 = 'slf4j.version', ${cdpd_slf4j_version} , hadoop-project/pom.xml

        REPLACE_31 = *[artifactId='httpclient']/version , ${cdpd_httpclient_version}, hadoop-project/pom.xml
        REPLACE_32 = *[artifactId='httpcore']/version , ${cdpd_httpcore_version}, hadoop-project/pom.xml

[flume-ng]
build_tool = maven

    [[artifacts]]
        artifact_1 = flume-ng-dist/target/apache-flume-${flume-ng_jar_version}-bin.tar.gz
        artifact_2 = flume-ng-dist/target/apache-flume-${flume-ng_jar_version}-src.tar.gz

    [[setversion_cmd]]
        cmd_1 = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${flume-ng_jar_version}
        cmd_2 = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${flume-ng_jar_version}, build-support

    [[install_cmd]]
        cmd_1 = ${MVN_CMD} -B -U clean install -DskipTests
        cmd_2 = ${MVN_CMD} source:jar javadoc:javadoc -DgenerateReports=false -DskipTests -Psite install

    [[fortify_cmd]]
        cmd_1 = ${MVN_CMD} -DskipTests clean install
        cmd_2 = ${MVN_CMD} ${FORTIFY_ARGS} -Dfortify.sca.buildId=flume-${flume-ng_jar_version} ${FORTIFY_CLEAN_CMD}
        cmd_3 = ${MVN_CMD} -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=flume-${flume-ng_jar_version} -Dfortify.sca.verbose=true -Dfortify.sca.translateLogfile=translate.log -Dfortify.sca.debug=true ${FORTIFY_TRANSLATE_CMD}
        cmd_4 = sourceanalyzer -b flume-${flume-ng_jar_version} ${FORTIFY_SCAN_MEMORY} -scan -f flume-${flume-ng_jar_version}.fpr

    [[xml-replace]]
        REPLACE_1 = 'scala.binary.version', '2.11', pom.xml
        REPLACE_2 = 'codehaus.jackson.version', '1.9.13', pom.xml
        REPLACE_3 = 'commons-cli.version', '1.4', pom.xml
        REPLACE_4 = 'commons-codec.version', '1.9', pom.xml
        REPLACE_5 = 'commons-collections.version', '3.2.2', pom.xml
        REPLACE_6 = 'commons-compress.version', '1.18', pom.xml
        REPLACE_7 = 'commons-dbcp.version', '1.4', pom.xml
        REPLACE_8 = 'commons-io.version', '2.6', pom.xml
        REPLACE_9 = 'commons-lang.version', '2.6', pom.xml
        REPLACE_10 = 'fasterxml.jackson.version', '2.9.8', pom.xml
        REPLACE_11 = 'hadoop.version', ${hadoop_jar_version}, pom.xml
        REPLACE_12 = 'hbase.version', ${hbase_jar_version}, pom.xml
        # REPLACE_13 = 'hive.version', ${hive_jar_version}, pom.xml
        REPLACE_14 = 'httpclient.version', '4.5.3', pom.xml
        REPLACE_15 = 'httpcore.version', '4.4.6', pom.xml
        REPLACE_16 = 'jetty.version', '9.3.25.v20180904', pom.xml
        REPLACE_17 = 'joda-time.version', '2.9.9', pom.xml
        REPLACE_18 = 'kafka.version', ${kafka_jar_version}, pom.xml
        REPLACE_19 = 'search.version', ${search_jar_version}, pom.xml
        REPLACE_20 = 'netty.version', '3.10.6.Final', pom.xml
        REPLACE_21 = 'snappy-java.version', '1.1.4', pom.xml
        REPLACE_22 = 'solr-global.version', ${solr_jar_version}, pom.xml
        REPLACE_23 = 'slf4j.version', '1.7.25', pom.xml
        REPLACE_24 = 'thrift.version', '0.9.3-1', pom.xml
        REPLACE_25 = 'avro.version', ${avro_jar_version}, pom.xml
        REPLACE_26 = 'tika.version', '1.18', pom.xml

[knox]
build_tool = maven
NPM_REPO_URL = "https://nodejs.org/download/release"
COMMON_BUILD_OPTS = "${MVN_CMD}  -Ppackage,release,idbroker -DskipCheck=true -Dcheckstyle.skip=true -Drepo.id=${NEXUS_DEPLOY_REPO_ID} -Dinternal.maven.repo=${NEXUS_REPO_URL} -DdownloadRoot=${NPM_REPO_URL}"
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${knox_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS}  deploy -DskipITs -DskipTests
package = 2
coverage_tool = cobertura

    [[artifacts]]
        artifact_1 = target/${knox_jar_version}/knox-${knox_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} install -DskipITs -DskipTests -Dmaven.javadoc.skip=true

    [[fortify_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} install -DskipITs -DskipTests -Dmaven.javadoc.skip=true
        cmd_2 = ${COMMON_BUILD_OPTS} -DskipITs -DskipTests -Dmaven.javadoc.skip=true ${FORTIFY_ARGS} -Dfortify.sca.buildId=knox-${knox_jar_version} ${FORTIFY_CLEAN_CMD}
        cmd_3 = ${COMMON_BUILD_OPTS} -DskipITs -DskipTests -Dmaven.javadoc.skip=true ${FORTIFY_ARGS} -Dfortify.sca.buildId=knox-${knox_jar_version} ${FORTIFY_TRANSLATE_CMD}
        cmd_4 = sourceanalyzer -b knox-${knox_jar_version} ${FORTIFY_SCAN_MEMORY} -scan -f knox-${knox_jar_version}.fpr

    [[test_cmd]]
        cmd_1 = "${MVN_CMD} -DskipTests=false -Ppackage,release,idbroker install"

    [[test_coverage_cmd]]
        cmd_1 = "${MVN_CMD} -DskipTests=false -Ppackage,release,idbroker cobertura:cobertura"

    [[xml-replace]]
    REPLACE_1 = 'gateway.version', ${knox_jar_version}, pom.xml
    REPLACE_2 = 'hadoop.version', ${hadoop_jar_version}, pom.xml
    REPLACE_3 = 'zookeeper.version', ${zookeeper_jar_version}, pom.xml
    REPLACE_4 = 'gcs.version', ${gcs_jar_version}, gateway-cloud-bindings/pom.xml
    REPLACE_5 = 'bigdataoss.version', ${gcs_jar_version}, gateway-cloud-bindings/pom.xml
    REPLACE_6 = 'downloadRoot', "https://nodejs.org/download/release/", gateway-admin-ui/pom.xml

[hadoop-lzo]
build_tool = maven
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${hadoop-lzo_jar_version}

    [[artifacts]]
        artifact_1 = target/hadoop-lzo-${hadoop-lzo_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = "wget -O ${BASE_DIR}/SOURCES/hadoop-lzo/src/main/native/config/config.guess http://dev.hortonworks.com.s3.amazonaws.com/REJENKINS/config.guess"
        cmd_2 = "${MVN_CMD} -Dversion=${hadoop-lzo_jar_version} -Dhadoop.version=${hadoop_jar_version} -Drepo.maven.org=${NEXUS_REPO_URL} -Dmvnrepo=${NEXUS_REPO_URL} clean install package -Dmaven.javadoc.skip=true"
        cmd_3 = "tar -zvcf hadoop-lzo-${hadoop-lzo_jar_version}.tar.gz native hadoop-lzo-${hadoop-lzo_jar_version}.jar  hadoop-lzo-${hadoop-lzo_jar_version}-sources.jar --exclude=native/Linux-amd64-64/src --exclude=native/Linux-amd64-64/.libs --exclude=native/Linux-amd64-64/impl --exclude=native/Linux-amd64-64/libgplcompression.la --exclude=native/Linux-amd64-64/Makefile --exclude=native/Linux-amd64-64/config.status --exclude=native/Linux-amd64-64/config.log --exclude=native/Linux-amd64-64/libtool" , target

    [[xml-replace]]
        REPLACE_1 = 'hadoop.current.version', ${hadoop_jar_version} , pom.xml

[hadoop-lzo]
build_tool = maven
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${hadoop-lzo_jar_version}

    [[artifacts]]
        artifact_1 = target/hadoop-lzo-${hadoop-lzo_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = "wget -O ${BASE_DIR}/SOURCES/hadoop-lzo/src/main/native/config/config.guess http://dev.hortonworks.com.s3.amazonaws.com/REJENKINS/config.guess"
        cmd_2 = "${MVN_CMD} -Dversion=${hadoop-lzo_jar_version} -Dhadoop.version=${hadoop_jar_version} -Drepo.maven.org=${NEXUS_REPO_URL} -Dmvnrepo=${NEXUS_REPO_URL} clean install package -Dmaven.javadoc.skip=true"
        cmd_3 = "tar -zvcf hadoop-lzo-${hadoop-lzo_jar_version}.tar.gz native hadoop-lzo-${hadoop-lzo_jar_version}.jar  hadoop-lzo-${hadoop-lzo_jar_version}-sources.jar --exclude=native/Linux-amd64-64/src --exclude=native/Linux-amd64-64/.libs --exclude=native/Linux-amd64-64/impl --exclude=native/Linux-amd64-64/libgplcompression.la --exclude=native/Linux-amd64-64/Makefile --exclude=native/Linux-amd64-64/config.status --exclude=native/Linux-amd64-64/config.log --exclude=native/Linux-amd64-64/libtool" , target

    [[xml-replace]]
        REPLACE_1 = 'hadoop.current.version', ${hadoop_jar_version} , pom.xml

    [[text-replace]]
        REPLACE_1 = 'Linux-amd64-64', 'Linux-ppc64le-64', ../bigtop-new/bigtop-packages/src/common/hadoop-lzo/install_hadoop-lzo.sh, regex_replace

[superset]
build_tool = npm
node_version = 5.11.1
N_PREFIX = ${HOME}/tools/n
PATH=${N_PREFIX}/n/versions/node/${node_version}/bin:${PATH}

    [[artifacts]]
        artifact_1 = superset-${superset_apache_version}-py34-none-linux_ppc64le.wgn

    [[download_modules]]
        cmd_1 = ${cdh_S3_DEV_LOC}/tars/pydruid/pydruid-${pydruid_apache_version}-py2.py3-none-any.whl, ${SOURCE_ROOT}/superset/pydruid-${pydruid_apache_version}-py2.py3-none-any.whl

    [[install_cmd]]
        cmd_1 = npm install n , superset/assets
        cmd_2 = bash -c "N_PREFIX=${N_PREFIX} node_modules/n/bin/n -q ${node_version}" , superset/assets
        cmd_3 = ${N_PREFIX}/n/versions/node/${node_version}/bin/npm install --global yarn@1.5.1 , superset/assets
        cmd_4 = ${N_PREFIX}/n/versions/node/${node_version}/bin/yarn install --pure-lockfile --ignore-engines , superset/assets
        cmd_5 = ${N_PREFIX}/n/versions/node/${node_version}/bin/node ${N_PREFIX}/n/versions/node/${node_version}/bin/npm run build --loglevel=info , superset/assets
        cmd_6 = ${BASE_DIR}/buildvenv/bin/wagon create . --format=tar.gz
        cmd_7 = rm -rf TMP_DIR
        cmd_8 = mkdir TMP_DIR
        cmd_9 = tar -C TMP_DIR -zxvf superset-${superset_apache_version}-py34-none-linux_ppc64le.wgn
        cmd_10 = rm -vf TMP_DIR/superset/wheels/pydruid-${pydruid_apache_version}-py2.py3-none-any.whl
        cmd_11 = cp -vf pydruid-${pydruid_apache_version}-py2.py3-none-any.whl TMP_DIR/superset/wheels/
        cmd_12 = tar -zcvf superset-${superset_apache_version}-py34-none-linux_ppc64le.wgn superset/ , TMP_DIR
        cmd_13 = rm -f superset-${superset_apache_version}-py34-none-linux_ppc64le.wgn
        cmd_14 = cp -vf TMP_DIR/superset-${superset_apache_version}-py34-none-linux_ppc64le.wgn .

    [[text-replace]]
        REPLACE_1 = 'none-linux_x86_64', 'none-linux_ppc64le', ../bigtop-new/bigtop-packages/src/rpm/superset/SPECS/superset.spec, regex_replace
        REPLACE_2 = 'none-linux_x86_64', 'none-linux_ppc64le', ../bigtop-new/bigtop-packages/src/common/superset/do-component-build, regex_replace

[tez]
PATH=/opt/bin/:/bin/:${FORTIFY_SCA_HOME}/bin:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

[hadoop]
build_tool = maven
COMMON_BUILD_OPTS = "${MVN_CMD} -Drequire.snappy=true -Dbundle.snappy=true -Dsnappy.prefix=x -Dsnappy.lib=${snappylib} -Pyarn-ui -Pdist -Pnative -Dtar -Psrc -Pgpg -Drequire.openssl=true -Dmaven.javadoc.skip=true -Dhbase.profile=2.0"
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${hadoop_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -DskipTests -DskipITs deploy
PATH=${GCC_HOME}/bin:${CMAKE_HOME}/bin:/opt/bin/:/bin/:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

    [[artifacts]]
        artifact_1 = hadoop-dist/target/hadoop-${hadoop_jar_version}.tar.gz
        artifact_2 = hadoop-client-modules/hadoop-client/target/hadoop-client-${hadoop_jar_version}.tar.gz
        artifact_3 = hadoop-hdfs-project/hadoop-hdfs/target/hadoop-hdfs-${hadoop_jar_version}.tar.gz
        artifact_4 = hadoop-hdfs-project/hadoop-hdfs-native-client/target/main/native/fuse-dfs/fuse_dfs

    [[download_modules]]
        cmd_1 = "NO_COMMAND", ""

    [[install_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -Dcontainer-executor.additional_cflags='-std=c90' -DskipTests -DskipITs install
        cmd_2 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -DskipTests -DskipITs site:site

    [[test_cmd]]
        cmd_1 = ${MVN_CMD} test

    [[text-replace]]
        REPLACE_1 = '<module>hadoop-mapreduce-client-nativetask</module>', '', hadoop-mapreduce-project/hadoop-mapreduce-client/pom.xml , regex_replace

    [[xml-replace]]
        REPLACE_1 = 'forkedProcessTimeoutInSeconds', '1800' , hadoop-project/pom.xml
        REPLACE_2 = 'forkedProcessTimeoutInSeconds', '1800' , hadoop-tools/hadoop-distcp/pom.xml
        REPLACE_3 = 'argLine', '-Xms2048m -Xmx3072m -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError', hadoop-project/pom.xml
        REPLACE_4 = 'argLine', '-Xms2048m -Xmx3072m -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError', hadoop-tools/hadoop-distcp/pom.xml
        REPLACE_5 = 'zookeeper.version', ${zookeeper_jar_version} , pom.xml
        REPLACE_7 = 'gcs.version' , ${gcs_jar_version} , hadoop-project/pom.xml


[zeppelin]
PATH=/opt/bin/:/bin/:${FORTIFY_SCA_HOME}/bin:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

[falcon]
PATH=/opt/bin/:/bin/:${FORTIFY_SCA_HOME}/bin:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

    [[text-replace]]
        REPLACE_1 = '<nodeVersion>v0.10.30</nodeVersion>', '<nodeVersion>v5.7.1</nodeVersion>', falcon-ui/pom.xml, regex_replace
        REPLACE_2 = '<npmVersion>1.4.3</npmVersion>', '<npmVersion>4.2.0</npmVersion>', falcon-ui/pom.xml, regex_replace
        REPLACE_3 = 'karma-phantomjs-launcher": ".*"', 'karma-phantomjs-launcher": "1.0.2"', falcon-ui/package.json, regex_replace
        REPLACE_4 = 'phantomjs": ".*"', 'phantomjs": "~2.1.0"', falcon-ui/package.json, regex_replace

[tez_hive2]
PATH=/opt/bin/:/bin/:${FORTIFY_SCA_HOME}/bin:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

    [[text-replace]]
        REPLACE_1 = 'grunt-mocha": ".*"', 'grunt-mocha": "1.0.2"', tez-ui/src/main/webapp/package.json, regex_replace
        REPLACE_2 = '<artifactId>frontend-maven-plugin</artifactId>', '<artifactId>frontend-maven-plugin</artifactId><version>1.4</version>', tez-ui/pom.xml, regex_replace
        REPLACE_3 = '<nodeVersion>v0.12.2</nodeVersion>', '<nodeVersion>v5.7.1</nodeVersion>', tez-ui/pom.xml, regex_replace

[ranger]
build_tool = maven
COMMON_BUILD_OPTS = "${MVN333_CMD} -DskipCheck=true -Dcheckstyle.skip=true -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL}"
setversion_cmd = ${MVN333_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${ranger_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS} package assembly:assembly deploy -Pgpg -DskipITs -DskipTests -Dmaven.javadoc.skip=true

    [[artifacts]]
        artifact_1 = target/ranger-${ranger_jar_version}-admin.tar.gz
        artifact_2 = target/ranger-${ranger_jar_version}-hbase-plugin.tar.gz
        artifact_3 = target/ranger-${ranger_jar_version}-hdfs-plugin.tar.gz
        artifact_4 = target/ranger-${ranger_jar_version}-hive-plugin.tar.gz
        artifact_5 = target/ranger-${ranger_jar_version}-kafka-plugin.tar.gz
        artifact_6 = target/ranger-${ranger_jar_version}-kms.tar.gz
        artifact_7 = target/ranger-${ranger_jar_version}-knox-plugin.tar.gz
        artifact_8 = target/ranger-${ranger_jar_version}-migration-util.tar.gz
        artifact_9 = target/ranger-${ranger_jar_version}-ranger-tools.tar.gz
        artifact_10 = target/ranger-${ranger_jar_version}-solr-plugin.tar.gz
        artifact_11 = target/ranger-${ranger_jar_version}-storm-plugin.tar.gz
        artifact_12 = target/ranger-${ranger_jar_version}-tagsync.tar.gz
        artifact_13 = target/ranger-${ranger_jar_version}-usersync.tar.gz
        artifact_14 = target/ranger-${ranger_jar_version}-yarn-plugin.tar.gz
        artifact_15 = target/ranger-${ranger_jar_version}-src.tar.gz
        artifact_16 = target/ranger-${ranger_jar_version}-atlas-plugin.tar.gz

    [[install_cmd]]
        cmd_1 = "${COMMON_BUILD_OPTS} package assembly:assembly install -Pppc,gpg -DskipITs -DskipTests -Dmaven.javadoc.skip=true"

    [[fortify_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} install -Pgpg -DskipITs -DskipTests -Dmaven.javadoc.skip=true
        cmd_2 = ${COMMON_BUILD_OPTS} -Pgpg -DskipTests -DskipITs -Dmaven.javadoc.skip=true ${FORTIFY_ARGS} -Dfortify.sca.buildId=ranger-${ranger_jar_version} ${FORTIFY_CLEAN_CMD}
        cmd_3 = ${COMMON_BUILD_OPTS} -Pgpg -DskipTests -DskipITs -Dmaven.javadoc.skip=true ${FORTIFY_ARGS} -Dfortify.sca.buildId=ranger-${ranger_jar_version} ${FORTIFY_TRANSLATE_CMD}
        cmd_4 = ${MVN_CMD} ${FORTIFY_ARGS} -Dfortify.sca.buildId=ranger-${ranger_jar_version} ${FORTIFY_SCAN_CMD}

    [[test_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} test -DfailIfNoTests=false ${MAVEN_TEST_OPTS}

    [[xml-replace]]
        REPLACE_1 = 'hadoop.version', ${hadoop_jar_version}, pom.xml
        REPLACE_2 = 'hadoop-auth.version', ${hadoop_jar_version}, pom.xml
        REPLACE_3 = 'hadoop-common.version', ${hadoop_jar_version}, pom.xml
        REPLACE_4 = 'hbase.version', ${hbase_jar_version}, pom.xml
        REPLACE_5 = 'hive.version', ${hive_jar_version}, pom.xml
        REPLACE_6 = 'kafka.version', ${kafka_jar_version}, pom.xml
        REPLACE_7 = 'zookeeper.version', ${zookeeper_jar_version}, pom.xml
        REPLACE_8 = 'tez.version', ${tez_jar_version}, pom.xml
        REPLACE_9 = 'calcite.version', ${calcite_jar_version}, pom.xml
        REPLACE_10 = 'knox.gateway.version', ${knox_jar_version}, pom.xml
        REPLACE_12 = 'atlas.version', ${atlas_jar_version}, pom.xml

[avatica]
build_tool = maven
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${avatica_jar_version}
deploy_cmd = "${MVN_CMD} deploy -Drepo.id=${NEXUS_DEPLOY_REPO_ID} -Dinternal.maven.repo=${NEXUS_REPO_URL} -DskipITs -DskipTests"
no_package = True

    [[install_cmd]]
        cmd_1 = ${MVN_CMD} install package -DskipITs -DskipTests -P!compile-protobuf

    [[test_cmd]]
        cmd_1 = ${MVN_CMD} test

[hive_warehouse_connector]

    [[text-replace]]
        REPLACE_2 = 'https://dl.bintray.com/typesafe/ivy-releases', 'https://dl.bintray.com/typesafe/ivy-releases', build/sbt-launch-lib.bash, regex_replace

[streams_messaging_manager_ui]
build_tool = npm
node_version = 10.17.0
N_PREFIX = ${HOME}/tools/n
PATH=${N_PREFIX}/n/versions/node/${node_version}/bin:${PATH}

    [[artifacts]]
        artifact_1 = streams_messaging_manager_ui-${streams_messaging_manager_ui_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = bash -c "echo 'MODE="standalone"' > .env"
        cmd_2 = npm install
        cmd_3 = npm run build
        cmd_4 = npm run build-standalone-server
        cmd_5 = npm install node-linux-ppc64le@lts --prefix nodejs --force
        cmd_6 = mv nodejs/node_modules/node-linux-ppc64le nodejs/node_modules/node
        cmd_6 = npm install forever --prefix nodejs/node_modules/node
        cmd_7 = mv nodejs/node_modules/node prod-server/dist/
        cmd_8 = tar -C prod-server/dist -czvf streams_messaging_manager_ui-${streams_messaging_manager_ui_jar_version}.tar.gz .

[hue]
build_tool = maven
COMMON_BUILD_OPTS = "${MVN_CMD} -Drepoid=${NEXUS_DEPLOY_REPO_ID} -Drepourl=${NEXUS_REPO_URL} -Dreponame=${NEXUS_DEPLOY_REPO_ID} ${MAVEN_TEST_OPTS} ${NPM_ARGS}"
deploy_cmd = ${COMMON_BUILD_OPTS} -DskipTests deploy
coverage_tool = cobertura
node_version = 10.17.0
N_PREFIX = ${HOME}/tools/n
PATH=${N_PREFIX}/n/versions/node/${node_version}/bin:${PYTHON27_PATH}:${PATH}
PYPI_MIRROR = "https://pypi.python.org/simple/"
PYTHONPATH=/usr/lib64/python2.7

    [[setversion_cmd]]
    cmd_1 = ${MVN_CMD} -f maven/pom.xml ${MVN_SET_VERSION_CMD} -DnewVersion=${hue_jar_version}
    cmd_2 = ${MVN_CMD} -f desktop/libs/librdbms/java/pom.xml versions:update-parent -DparentVersion=${hue_jar_version}

    [[artifacts]]
    artifact_1 = build/hue-${hue_jar_version}.tar.gz
    artifact_2 = desktop/desktop.db

    [[install_cmd]]
    cmd_1 = bash -c "mkdir -p build/release/prod/"
    cmd_2 = ${COMMON_BUILD_OPTS} -DskipTests -f maven/pom.xml install -Dmaven.javadoc.skip=true -DlocalRepositoryPath=build/release/prod/
    #   Python virtual environments are created by Makefile and relocatable.sh
    cmd_3 = bash -c "PYPI_MIRROR=${PYPI_MIRROR} make apps docs"
    cmd_4 = bash -c "PYPI_MIRROR=${PYPI_MIRROR} bash ./tools/relocatable.sh"
    cmd_5 = bash -c "PYPI_MIRROR=${PYPI_MIRROR} make prod"
    cmd_6 = bash -c "rm -rf build/release/prod/hue-*.tgz build/release/prod/hue-${hue_jar_version}"
    cmd_7 = bash -c "mv build/release/prod/hue-* build/release/prod/hue-${hue_jar_version}"
    cmd_8 = tar --use-compress-program pigz -C build/release/prod -cf "build/hue-${hue_jar_version}.tar.gz" "hue-${hue_jar_version}"

    [[xml-replace]]
        REPLACE_1 = parent/version, ${hue_jar_version}, desktop/libs/librdbms/java/pom.xml

[cruise_control]
buid_tool = gradle
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public

    [[install_cmd]]
         cmd_1 = ./gradlew distTar

    [[artifacts]]
        artifact_1 = build/distributions/CRUISE_CONTROL_2.11-${cruise_control_jar_version}.tgz

    [[text-replace]]
        replace_1 = 'mavenUrl', ${NEXUS_PROXY_URL}, gradle.properties, key_value
        replace_2 = 'gbnUrl', ${GBN_MVN_REPO}, gradle.properties, key_value
        replace_3 = 'cdpProjectVersion', ${cruise_control_jar_version}, gradle.properties, key_value
        replace_4 = 'zookeeperVersion', ${zookeeper_jar_version}, gradle.properties, key_value
        replace_5 = 'kafkaVersion', ${kafka_jar_version}, gradle.properties, key_value

[kafka]
build_tool = gradle
COMMON_BUILD_OPTS = "{GRADLE_CMD} ${GRADLE_OPTS} "
deploy_cmd = ${COMMON_BUILD_OPTS} deploy
kafka_scala_version = 2.11
kafka_scala_version_compile = 2.11.12
package_count = 2
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public

BUILD_KAFKA_SETVERSION_OPTS = "-Pversion=${kafka_jar_version}"
BUILD_KAFKA_OPTS = "${BUILD_KAFKA_SETVERSION_OPTS}"
BUILD_KAFKA_DOC_OPTS = "${BUILD_KAFKA_OPTS} docsJar"
BUILD_KAFKA_INSTALL_OPTS = "${BUILD_KAFKA_OPTS} clean jar"
BUILD_KAFKA_EXAMPLES_INSTALL_OPTS = "${BUILD_KAFKA_OPTS} examples:jar"
BUILD_KAFKA_DEPLOY_OPTS = "${BUILD_KAFKA_OPTS} releaseTarGz"
BUILD_KAFKA_TEST_OPTS = "${BUILD_KAFKA_OPTS} cleanTest testWithFlakyRetry -PrepoUrl=${NEXUS_URL} -Pgbnurl=${GBN_MVN_REPO}"
BUILD_KAFKA_UPLOAD = "${BUILD_KAFKA_SETVERSION_OPTS} installAll"

    [[artifacts]]
        artifact_1 = core/build/distributions/kafka_${kafka_scala_version}-${kafka_jar_version}.tgz
        artifact_2 = kafka.tar.gz

    [[install_cmd]]
        cmd_2 = ./gradlew ${BUILD_KAFKA_INSTALL_OPTS}
        cmd_3 = ./gradlew ${BUILD_KAFKA_DOC_OPTS}
        cmd_4 = ./gradlew ${BUILD_KAFKA_EXAMPLES_INSTALL_OPTS}
        cmd_6 = ./gradlew ${BUILD_KAFKA_DEPLOY_OPTS}
        cmd_7 = ./gradlew ${BUILD_KAFKA_UPLOAD}
        cmd_10 =  "tar -zcvf kafka.tar.gz core/build/docs NOTICE LICENSE"

    [[test_cmd]]
        cmd_1 = ./gradlew ${BUILD_KAFKA_TEST_OPTS}

   [[fortify_cmd]]
        # TO DO Replace gradlew PATH. For now hard coding the path.
        cmd_2 = sourceanalyzer -b kafka-${kafka_jar_version} -source "1.7" ${SOURCE_ROOT}/kafka/gradlew ${BUILD_KAFKA_INSTALL_OPTS}
        cmd_3 = sourceanalyzer -b kafka-${kafka_jar_version} -source "1.7" ${SOURCE_ROOT}/kafka/gradlew ${BUILD_KAFKA_DOC_OPTS}
        cmd_4 = sourceanalyzer -b kafka-${kafka_jar_version} -source "1.7" ${SOURCE_ROOT}/kafka/gradlew ${BUILD_KAFKA_EXAMPLES_INSTALL_OPTS}
        cmd_6 = sourceanalyzer -b kafka-${kafka_jar_version} ${FORTIFY_SCAN_MEMORY} -scan -f kafka-${kafka_jar_version}.fpr

   [[text-replace]]
        REPLACE_1 = 'scalaVersion', ${kafka_scala_version_compile}, gradle.properties , key_value
        REPLACE_2 = 'version', ${kafka_jar_version}, gradle.properties , key_value
        REPLACE_3 = 'zookeeperVersion', ${zookeeper_jar_version}, gradle.properties , key_value
        REPLACE_4 = 'mavenUrl', ${NEXUS_URL}, gradle.properties , key_value
        REPLACE_5 = 'gbnUrl', ${GBN_MVN_REPO}, gradle.properties , key_value

        REPLACE_6 = 'jetty', ${cdpd_jetty_version}, gradle/dependencies.gradle , key_value

[solr]
COMPONENT = solr
build_tool = ant
NEXUS_URL = https://${NEXUS_PROXY_HOST}/nexus/content/groups/public
IVY_MIRROR_PROP = ${NEXUS_URL}
M2_REPO_SUFFIX = ""
BUILD_OPTS="-Dversion=${solr_jar_version} -Dslf4j.binding=slf4j-log4j12 -Dexclude.from.war=nothing -Divy.home=${HOME}/.ivy2 -Drepo.maven.org=${IVY_MIRROR_PROP} -Divy_bootstrap_url1=${IVY_MIRROR_PROP} -Divy_install_path=${HOME}/tools/ant/latest/lib -lib ${HOME}/tools/ant/latest/lib -Dreactor.repo=file://${HOME}/.m2/repository${M2_REPO_SUFFIX} -Dcauldron-gbn=${IVY_MIRROR_PROP}"

        [[artifacts]]
          cmd_1 = build/solr-${solr_jar_version}.tar.gz

        [[install_cmd]]
          cmd_1 = ant ${BUILD_OPTS} ivy-bootstrap
          cmd_2 = mkdir -p "test-framework/lib"
          cmd_3 = ant ${BUILD_OPTS} clean
          cmd_4 = ant ${BUILD_OPTS} package-local-src-tgz , solr
          cmd_5 = ant ${BUILD_OPTS} create-package , solr
          cmd_6 = ant ${BUILD_OPTS} -Dcontrib-crawl.exclude=contrib/depends-sentry-libs/build.xml -Dmaven-deps.exclude="**/depends-sentry-libs/**" generate-maven-artifacts
          cmd_7 = rm -rf build
          cmd_8 = mkdir build
          cmd_9 = tar --use-compress-program pigz -C build -xf ${COMPONENT}/build/${COMPONENT}-${solr_jar_version}-src.tgz
          cmd_10 = tar --use-compress-program pigz -C build/${COMPONENT}-${solr_jar_version} --strip-components=1 -xf ${COMPONENT}/package/${COMPONENT}-${solr_jar_version}.tgz
          cmd_11 = cp -rf cloudera build/${COMPONENT}-${solr_jar_version}
          cmd_13 = tar --use-compress-program pigz -cf ${COMPONENT}-${solr_jar_version}.tar.gz ${COMPONENT}-${solr_jar_version} , build

        [[fortify_cmd]]
          cmd_0 = sourceanalyzer -b "${COMPONENT}-${solr_jar_version}" -clean
          cmd_1 = sourceanalyzer -b "${COMPONENT}-${solr_jar_version}" -source 1.8 ant ${BUILD_OPTS} ivy-bootstrap
          cmd_2 = mkdir -p "test-framework/lib"
          cmd_3 = sourceanalyzer -b "${COMPONENT}-${solr_jar_version}" -source 1.8 ant ${BUILD_OPTS} clean
          cmd_4 = sourceanalyzer -b "${COMPONENT}-${solr_jar_version}" -source 1.8 ant ${BUILD_OPTS} package-local-src-tgz , solr
          cmd_5 = sourceanalyzer -b "${COMPONENT}-${solr_jar_version}" -source 1.8 ant ${BUILD_OPTS} create-package , solr
          cmd_6 = sourceanalyzer -b "${COMPONENT}-${solr_jar_version}" -source 1.8 ant ${BUILD_OPTS} -Dcontrib-crawl.exclude=contrib/depends-sentry-libs/build.xml -Dmaven-deps.exclude="**/depends-sentry-libs/**" generate-maven-artifacts
          cmd_7 = sourceanalyzer -b "${COMPONENT}-${solr_jar_version}" ${FORTIFY_SCAN_LARGE_MEMORY} -scan -f "${COMPONENT}-${solr_jar_version}".fpr

        [[text-replace]]
          cmd_1 = 'gcs.version' , ${gcs_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_2 = 'org.apache.hadoop.version' , ${hadoop_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_3 = 'org.apache.knox.version', ${knox_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_4 = 'org.apache.zookeeper.version' , ${zookeeper_jar_version} , lucene/ivy-versions.properties , key_value
          cmd_5 = 'releases.cloudera.com' , ${GBN_MVN_REPO} , lucene/ivy-versions.properties , key_value
          cmd_6 = 'snapshots.cloudera.com', ${IVY_MIRROR_PROP} , lucene/ivy-versions.properties , key_value
          cmd_7 = 'reactor.repo', ${IVY_MIRROR_PROP} , lucene/ivy-versions.properties , key_value
          cmd_8 = 'org.eclipse.jetty.version', '${cdpd_jetty_version}', lucene/ivy-versions.properties , key_value
          cmd_9 = 'property name="cauldron-gbn" value=".*" override', 'property name="cauldron-gbn" value="${GBN_MVN_REPO}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_10 = 'property name="cauldron.cloudera.com" value=".*" override', 'property name="cauldron.cloudera.com" value="${GBN_MVN_REPO}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_11 = 'property name="reactor.repo" value=".*" override', 'property name="reactor.repo" value="${IVY_MIRROR_PROP}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_12 = 'property name="snapshots.cloudera.com" value=".*" override', 'property name="snapshots.cloudera.com" value="${IVY_MIRROR_PROP}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_13 = 'property name="releases.cloudera.com" value=".*" override', 'property name="releases.cloudera.com" value="${GBN_MVN_REPO}" override', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_14 = 'ibiblio name="sonatype-releases" root=".*" m2compatible', 'ibiblio name="sonatype-releases" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_15 = 'ibiblio name="maven.restlet.org" root=".*" m2compatible', 'ibiblio name="maven.restlet.org" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_16 = 'ibiblio name="cloudera" root=".*" m2compatible', 'ibiblio name="cloudera" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_17 = 'ibiblio name="releases.cloudera.com" root=".*" m2compatible', 'ibiblio name="releases.cloudera.com" root="${GBN_MVN_REPO}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_18 = 'ibiblio name="working-chinese-mirror" root=".*" m2compatible', 'ibiblio name="working-chinese-mirror" root="${IVY_MIRROR_PROP}" m2compatible', lucene/default-nested-ivy-settings.xml , regex_replace
          cmd_19 = 'property name="ivy_bootstrap_url1" value=".*"', 'property name="ivy_bootstrap_url1" value="${IVY_MIRROR_PROP}"', lucene/common-build.xml , regex_replace
          cmd_20 = 'property name="ivy_bootstrap_url2" value=".*"', 'property name="ivy_bootstrap_url2" value="${IVY_MIRROR_PROP}"', lucene/common-build.xml , regex_replace
          cmd_21 = 'io.netty.netty.version', ${cdpd_netty4_version}, lucene/ivy-versions.properties , key_value
          cmd_22 = 'org.apache.kerby.version', ${cdpd_kerby_version}, lucene/ivy-versions.properties , key_value
          cmd_23 = '/commons-cli/commons-cli', 1.2, lucene/ivy-versions.properties , key_value
          cmd_24 = '/commons-codec/commons-codec', ${cdpd_commons-codec_version}, lucene/ivy-versions.properties , key_value
          cmd_25 = '/commons-collections/commons-collections', ${cdpd_commons-collections_version}, lucene/ivy-versions.properties , key_value
          cmd_26 = '/commons-io/commons-io', ${cdpd_commons-io_version}, lucene/ivy-versions.properties , key_value
          cmd_27 = '/org.apache.commons/commons-lang3', ${cdpd_commons-lang3_version}, lucene/ivy-versions.properties , key_value
          cmd_28 = 'org.apache.curator.version', ${cdpd_curator_version}, lucene/ivy-versions.properties , key_value
          cmd_29 = '/org.apache.httpcomponents/httpclient', ${cdpd_httpclient_version}, lucene/ivy-versions.properties , key_value
          cmd_30 = '/org.apache.httpcomponents/httpcore', ${cdpd_httpcore_version}, lucene/ivy-versions.properties , key_value
          cmd_31 = 'org.codehaus.jackson.version', ${cdpd_jackson_version}, lucene/ivy-versions.properties , key_value
          cmd_32 = 'org.apache.logging.log4j.version', ${cdpd_log4j2_version}, lucene/ivy-versions.properties , key_value
          cmd_33 = '/com.google.re2j/re2j', ${cdpd_re2j_version}, lucene/ivy-versions.properties , key_value


    [[test_cmd]]
        cmd_1 = ant ${BUILD_OPTS} ivy-bootstrap resolve
        cmd_2 = ant ${BUILD_OPTS} clean test -Dtests.badapples=false -Dtests.jvms.override=2


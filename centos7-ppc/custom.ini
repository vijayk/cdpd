[hadooplzo]
build_tool = maven
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${hadooplzo_jar_version}

    [[artifacts]]
        artifact_1 = target/hadooplzo-${hadooplzo_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = "wget -O ${BASE_DIR}/SOURCES/hadooplzo/src/main/native/config/config.guess http://dev.hortonworks.com.s3.amazonaws.com/REJENKINS/config.guess"
        cmd_2 = "${MVN_CMD} -Dversion=${hadooplzo_jar_version} -Dhadoop.version=${hadoop_jar_version} -Drepo.maven.org=${NEXUS_REPO_URL} -Dmvnrepo=${NEXUS_REPO_URL} clean install package -Dmaven.javadoc.skip=true"
        cmd_3 = "tar -zvcf hadooplzo-${hadooplzo_jar_version}.tar.gz native hadoop-lzo-${hadooplzo_jar_version}.jar  hadoop-lzo-${hadooplzo_jar_version}-sources.jar --exclude=native/Linux-amd64-64/src --exclude=native/Linux-amd64-64/.libs --exclude=native/Linux-amd64-64/impl --exclude=native/Linux-amd64-64/libgplcompression.la --exclude=native/Linux-amd64-64/Makefile --exclude=native/Linux-amd64-64/config.status --exclude=native/Linux-amd64-64/config.log --exclude=native/Linux-amd64-64/libtool" , target

    [[xml-replace]]
        REPLACE_1 = 'hadoop.current.version', ${hadoop_jar_version} , pom.xml

    [[text-replace]]
        REPLACE_1 = 'Linux-amd64-64', 'Linux-ppc64le-64', ../bigtop-new/bigtop-packages/src/common/hadooplzo/install_hadooplzo.sh, regex_replace

[bigtop-jsvc]
build_tool = ant
    [[install_cmd]]
        cmd_0 = mkdir -p ${TAR_DIR}/bigtop-jsvc , ${BASE_DIR}
        cmd_1 = "wget -O ${TAR_DIR}/bigtop-jsvc/commons-daemon-${JSVC_VERSION}.tar.gz http://dev.hortonworks.com.s3.amazonaws.com/ARTIFACTS/ppc64le/commons-daemon-${JSVC_VERSION}-native-src.tar.gz" , ${BASE_DIR}

[superset]
build_tool = npm
node_version = 5.11.1
N_PREFIX = ${HOME}/tools/n

    [[artifacts]]
        artifact_1 = superset-0.23.3-py34-none-linux_ppc64le.wgn

    [[install_cmd]]
        cmd_1 = npm install n , superset/assets
        cmd_2 = bash -c "N_PREFIX=${N_PREFIX} node_modules/n/bin/n -q ${node_version}" , superset/assets
        cmd_3 = ${N_PREFIX}/n/versions/node/${node_version}/bin/npm install --loglevel=info , superset/assets
        cmd_4 = ${N_PREFIX}/n/versions/node/${node_version}/bin/node ${N_PREFIX}/n/versions/node/${node_version}/bin/npm run build --loglevel=info , superset/assets
        cmd_5 = ${BASE_DIR}/buildvenv/bin/wagon create . --format=tar.gz

    [[text-replace]]
        REPLACE_1 = 'none-linux_x86_64', 'none-linux_ppc64le', ../bigtop-new/bigtop-packages/src/rpm/superset/SPECS/superset.spec, regex_replace
        REPLACE_2 = 'none-linux_x86_64', 'none-linux_ppc64le', ../bigtop-new/bigtop-packages/src/common/superset/do-component-build, regex_replace

[tez]
PATH=/opt/bin/:/bin/:${FORTIFY_SCA_HOME}/bin:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

[hadoop]
build_tool = maven
COMMON_BUILD_OPTS = "${MVN_CMD} -Drequire.snappy=true -Dbundle.snappy=true -Dsnappy.prefix=x -Dsnappy.lib=${snappylib} -Pyarn-ui -Pdist -Pnative -Dtar -Psrc -Pgpg -Drequire.openssl=true -Dmaven.javadoc.skip=true -Dhbase.profile=2.0"
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${hadoop_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -DskipTests -DskipITs deploy
PATH=${GCC_HOME}/bin:${CMAKE_HOME}/bin:/opt/bin/:/bin/:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

    [[artifacts]]
        artifact_1 = hadoop-dist/target/hadoop-${hadoop_jar_version}.tar.gz
        artifact_2 = hadoop-client-modules/hadoop-client/target/hadoop-client-${hadoop_jar_version}.tar.gz
        artifact_3 = hadoop-hdfs-project/hadoop-hdfs/target/hadoop-hdfs-${hadoop_jar_version}.tar.gz
        artifact_4 = hadoop-hdfs-project/hadoop-hdfs-native-client/target/main/native/fuse-dfs/fuse_dfs

    [[download_modules]]
        cmd_1 = "NO_COMMAND", ""

    [[install_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -Dcontainer-executor.additional_cflags='-std=c90' -DskipTests -DskipITs install
        cmd_2 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -DskipTests -DskipITs site:site

    [[test_cmd]]
        cmd_1 = ${MVN_CMD} test

    [[text-replace]]
        REPLACE_1 = '<module>hadoop-mapreduce-client-nativetask</module>', '', hadoop-mapreduce-project/hadoop-mapreduce-client/pom.xml , regex_replace

    [[xml-replace]]
        REPLACE_1 = 'forkedProcessTimeoutInSeconds', '1800' , hadoop-project/pom.xml
        REPLACE_2 = 'forkedProcessTimeoutInSeconds', '1800' , hadoop-tools/hadoop-distcp/pom.xml
        REPLACE_3 = 'argLine', '-Xms2048m -Xmx3072m -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError', hadoop-project/pom.xml
        REPLACE_4 = 'argLine', '-Xms2048m -Xmx3072m -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError', hadoop-tools/hadoop-distcp/pom.xml
        REPLACE_5 = 'zookeeper.version', ${zookeeper_jar_version} , pom.xml
        REPLACE_7 = 'gcs.version' , ${gcs_jar_version} , hadoop-project/pom.xml


[zeppelin]
PATH=/opt/bin/:/bin/:${FORTIFY_SCA_HOME}/bin:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

[falcon]
PATH=/opt/bin/:/bin/:${FORTIFY_SCA_HOME}/bin:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

    [[text-replace]]
        REPLACE_1 = '<nodeVersion>v0.10.30</nodeVersion>', '<nodeVersion>v5.7.1</nodeVersion>', falcon-ui/pom.xml, regex_replace
        REPLACE_2 = '<npmVersion>1.4.3</npmVersion>', '<npmVersion>4.2.0</npmVersion>', falcon-ui/pom.xml, regex_replace
        REPLACE_3 = 'karma-phantomjs-launcher": ".*"', 'karma-phantomjs-launcher": "1.0.2"', falcon-ui/package.json, regex_replace
        REPLACE_4 = 'phantomjs": ".*"', 'phantomjs": "~2.1.0"', falcon-ui/package.json, regex_replace

[tez_hive2]
PATH=/opt/bin/:/bin/:${FORTIFY_SCA_HOME}/bin:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/bin/:/usr/lib/mit/bin:${TOOLS_HOME}/phantomjs/bin

    [[text-replace]]
        REPLACE_1 = 'grunt-mocha": ".*"', 'grunt-mocha": "1.0.2"', tez-ui/src/main/webapp/package.json, regex_replace
        REPLACE_2 = '<artifactId>frontend-maven-plugin</artifactId>', '<artifactId>frontend-maven-plugin</artifactId><version>1.4</version>', tez-ui/pom.xml, regex_replace
        REPLACE_3 = '<nodeVersion>v0.12.2</nodeVersion>', '<nodeVersion>v5.7.1</nodeVersion>', tez-ui/pom.xml, regex_replace

[ranger]
build_tool = maven
COMMON_BUILD_OPTS = "${MVN333_CMD} -DskipCheck=true -Dcheckstyle.skip=true -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL}"
setversion_cmd = ${MVN333_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${ranger_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS} package assembly:assembly deploy -Pgpg -DskipITs -DskipTests -Dmaven.javadoc.skip=true

    [[artifacts]]
        artifact_1 = target/ranger-${ranger_jar_version}-admin.tar.gz
        artifact_2 = target/ranger-${ranger_jar_version}-hbase-plugin.tar.gz
        artifact_3 = target/ranger-${ranger_jar_version}-hdfs-plugin.tar.gz
        artifact_4 = target/ranger-${ranger_jar_version}-hive-plugin.tar.gz
        artifact_5 = target/ranger-${ranger_jar_version}-kafka-plugin.tar.gz
        artifact_6 = target/ranger-${ranger_jar_version}-kms.tar.gz
        artifact_7 = target/ranger-${ranger_jar_version}-knox-plugin.tar.gz
        artifact_8 = target/ranger-${ranger_jar_version}-migration-util.tar.gz
        artifact_9 = target/ranger-${ranger_jar_version}-ranger-tools.tar.gz
        artifact_10 = target/ranger-${ranger_jar_version}-solr-plugin.tar.gz
        artifact_11 = target/ranger-${ranger_jar_version}-storm-plugin.tar.gz
        artifact_12 = target/ranger-${ranger_jar_version}-tagsync.tar.gz
        artifact_13 = target/ranger-${ranger_jar_version}-usersync.tar.gz
        artifact_14 = target/ranger-${ranger_jar_version}-yarn-plugin.tar.gz
        artifact_15 = target/ranger-${ranger_jar_version}-src.tar.gz
        artifact_16 = target/ranger-${ranger_jar_version}-atlas-plugin.tar.gz

    [[install_cmd]]
        cmd_1 = "${COMMON_BUILD_OPTS} package assembly:assembly install -Pppc,gpg -DskipITs -DskipTests -Dmaven.javadoc.skip=true"

    [[fortify_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} install -Pgpg -DskipITs -DskipTests -Dmaven.javadoc.skip=true
        cmd_2 = ${COMMON_BUILD_OPTS} -Pgpg -DskipTests -DskipITs -Dmaven.javadoc.skip=true ${FORTIFY_ARGS} -Dfortify.sca.buildId=ranger-${ranger_jar_version} ${FORTIFY_CLEAN_CMD}
        cmd_3 = ${COMMON_BUILD_OPTS} -Pgpg -DskipTests -DskipITs -Dmaven.javadoc.skip=true ${FORTIFY_ARGS} -Dfortify.sca.buildId=ranger-${ranger_jar_version} ${FORTIFY_TRANSLATE_CMD}
        cmd_4 = ${MVN_CMD} ${FORTIFY_ARGS} -Dfortify.sca.buildId=ranger-${ranger_jar_version} ${FORTIFY_SCAN_CMD}

    [[test_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} test -DfailIfNoTests=false ${MAVEN_TEST_OPTS}

    [[xml-replace]]
        REPLACE_1 = 'hadoop.version', ${hadoop_jar_version}, pom.xml
        REPLACE_2 = 'hadoop-auth.version', ${hadoop_jar_version}, pom.xml
        REPLACE_3 = 'hadoop-common.version', ${hadoop_jar_version}, pom.xml
        REPLACE_4 = 'hbase.version', ${hbase_jar_version}, pom.xml
        REPLACE_5 = 'hive.version', ${hive_jar_version}, pom.xml
        REPLACE_6 = 'kafka.version', ${kafka_jar_version}, pom.xml
        REPLACE_7 = 'zookeeper.version', ${zookeeper_jar_version}, pom.xml
        REPLACE_8 = 'tez.version', ${tez_jar_version}, pom.xml
        REPLACE_9 = 'calcite.version', ${calcite_jar_version}, pom.xml
        REPLACE_10 = 'knox.gateway.version', ${knox_jar_version}, pom.xml
        REPLACE_12 = 'atlas.version', ${atlas_jar_version}, pom.xml

[avatica]
build_tool = maven
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${avatica_jar_version}
deploy_cmd = "${MVN_CMD} deploy -Drepo.id=${NEXUS_DEPLOY_REPO_ID} -Dinternal.maven.repo=${NEXUS_REPO_URL} -DskipITs -DskipTests"
no_package = True

    [[install_cmd]]
        cmd_1 = ${MVN_CMD} install package -DskipITs -DskipTests -P!compile-protobuf

    [[test_cmd]]
        cmd_1 = ${MVN_CMD} test

[hive_warehouse_connector]

    [[text-replace]]
        REPLACE_2 = 'https://dl.bintray.com/typesafe/ivy-releases', 'https://dl.bintray.com/typesafe/ivy-releases', build/sbt-launch-lib.bash, regex_replace

[hadoop]
build_tool = maven
COMMON_BUILD_OPTS = "${MVN_CMD} -Drequire.snappy=true -Dbundle.snappy=true -Dsnappy.prefix=x -Dsnappy.lib=/usr/lib/x86_64-linux-gnu -Pyarn-ui -Pdist -Pnative -Dtar -Psrc -Pgpg -Drequire.openssl=true -Dmaven.javadoc.skip=true -Dhbase.profile=2.0"
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${hadoop_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -DskipTests -DskipITs deploy

    [[artifacts]]
        artifact_1 = hadoop-dist/target/hadoop-${hadoop_jar_version}.tar.gz
        artifact_2 = hadoop-client-modules/hadoop-client/target/hadoop-client-${hadoop_jar_version}.tar.gz
        artifact_3 = hadoop-hdfs-project/hadoop-hdfs/target/hadoop-hdfs-${hadoop_jar_version}.tar.gz
        artifact_4 = hadoop-hdfs-project/hadoop-hdfs-native-client/target/main/native/fuse-dfs/fuse_dfs

    [[install_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -Dcontainer-executor.additional_cflags='-std=c90' -DskipTests -DskipITs install
        cmd_2 = ${COMMON_BUILD_OPTS} -DdistMgmtStagingId=${NEXUS_DEPLOY_REPO_ID} -DdistMgmtStagingUrl=${NEXUS_REPO_URL} -DskipTests -DskipITs site:site

    [[test_cmd]]
        cmd_1 = ${MVN_CMD} test

    [[xml-replace]]
        REPLACE_1 = 'forkedProcessTimeoutInSeconds', '1800' , hadoop-project/pom.xml
        REPLACE_2 = 'forkedProcessTimeoutInSeconds', '1800' , hadoop-tools/hadoop-distcp/pom.xml
        REPLACE_3 = 'argLine', '-Xms2048m -Xmx3072m -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError', hadoop-project/pom.xml
        REPLACE_4 = 'argLine', '-Xms2048m -Xmx3072m -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError', hadoop-tools/hadoop-distcp/pom.xml
        REPLACE_5 = 'zookeeper.version', ${zookeeper_jar_version} , pom.xml
        REPLACE_6 = 'gcs.version' , ${gcs_jar_version} , pom.xml


[superset]
build_tool = npm
node_version = 5.11.1
N_PREFIX = ${HOME}/tools/n
PATH=${N_PREFIX}/n/versions/node/${node_version}/bin:${PATH}

    [[artifacts]]
        artifact_1 = superset-${superset_apache_version}-py35-none-linux_x86_64.wgn

    [[download_modules]]
        cmd_1 = ${S3_DEV_LOC}/tars/pydruid/pydruid-${pydruid_apache_version}-py2.py3-none-any.whl, ${SOURCE_ROOT}/superset/pydruid-${pydruid_apache_version}-py2.py3-none-any.whl

    [[install_cmd]]
        cmd_1 = npm install n , superset/assets
        cmd_2 = bash -c "N_PREFIX=${N_PREFIX} node_modules/n/bin/n -q ${node_version}" , superset/assets
        cmd_3 = ${N_PREFIX}/n/versions/node/${node_version}/bin/npm install --global yarn@1.5.1 , superset/assets
        cmd_4 = ${N_PREFIX}/n/versions/node/${node_version}/bin/yarn install --pure-lockfile --ignore-engines , superset/assets
        cmd_5 = ${N_PREFIX}/n/versions/node/${node_version}/bin/node ${N_PREFIX}/n/versions/node/${node_version}/bin/npm run build --loglevel=info , superset/assets
        cmd_6 = ${BASE_DIR}/buildvenv/bin/wagon create . --format=tar.gz
        cmd_7 = rm -rf TMP_DIR
        cmd_8 = mkdir TMP_DIR
        cmd_9 = tar -C TMP_DIR -zxvf superset-${superset_apache_version}-py35-none-linux_x86_64.wgn
        cmd_10 = rm -vf TMP_DIR/superset/wheels/pydruid-${pydruid_apache_version}-py2.py3-none-any.whl
        cmd_11 = cp -vf pydruid-${pydruid_apache_version}-py2.py3-none-any.whl TMP_DIR/superset/wheels/
        cmd_12 = tar -zcvf superset-${superset_apache_version}-py35-none-linux_x86_64.wgn superset/ , TMP_DIR
        cmd_13 = rm -f superset-${superset_apache_version}-py35-none-linux_x86_64.wgn
        cmd_14 = cp -vf TMP_DIR/superset-${superset_apache_version}-py35-none-linux_x86_64.wgn .

[pydruid]
build_tool = python
no_package = True

    [[artifacts]]
        artifact_1 = dist/pydruid-0.4.2-py2.py3-none-any.whl

    [[install_cmd]]
        cmd_1 = ${BASE_DIR}/buildvenv/bin/python setup.py bdist_wheel

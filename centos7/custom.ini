[oozie]
build_tool = maven
COMMON_BUILD_OPTS = "${MVN_CMD} -fae -Dhadoop.version=${hadoop_jar_version} -Dhive.version=${hive_jar_version} -Dpig.version=${pig_jar_version} -Drepoid=${NEXUS_DEPLOY_REPO_ID} -Dreponame=${NEXUS_DEPLOY_REPO_ID} -Drepourl=${NEXUS_REPO_URL} -DdistMgmtReleaseUrl=${NEXUS_REPO_URL} -DmavenReleaseId=${NEXUS_DEPLOY_REPO_ID} -Pgpg,hadoop-2,!hadoop-1,uber,hwx-common"
setversion_cmd = ${MVN_CMD} ${MVN_SET_VERSION_CMD} -DnewVersion=${oozie_jar_version}
deploy_cmd = ${COMMON_BUILD_OPTS} deploy -DskipITs -DskipTests=true
coverage_tool = cobertura

    [[test_cmd]]
        cmd_1 =  ${COMMON_BUILD_OPTS} ${MAVEN_TEST_OPTS} -DjavaVersion=1.7 -Dmaven.test.failure.ignore=true -Dhadoop.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib test

    [[test_coverage_cmd]]
        cmd_1 = ${COMMON_BUILD_OPTS} ${MAVEN_TEST_OPTS} -Djava.net.preferIPv4Stack=true cobertura:cobertura

[isa_l]
PATH=/usr/bin:${GCC_HOME}/bin:${CMAKE_HOME}/bin:/opt/bin/:/bin/:${JAVA_HOME}/bin:${MVN_HOME}/bin:${FORREST_HOME}/bin:${R_HOME}/bin/:${ANT_HOME}/bin:${XERCES_HOME}/bin:${GRADLE_HOME}/bin:/usr/local/bin/:/usr/lib/mit/bin

    [[artifacts]]
        artifact_1 = isal-${isa_l_jar_version}.tar.gz

    [[install_cmd]]
        cmd_1 = sh autogen.sh
        cmd_2 = ./configure --prefix=${SOURCE_ROOT}/isa_l/isal-${isa_l_jar_version}
        cmd_3 = make
        cmd_4 = make install
        cmd_5 = tar -zcf isal-${isa_l_jar_version}.tar.gz isal-${isa_l_jar_version}

[impala]
build_tool = maven
COMPONENT_NAME = "impala"
IMPALA_HOME = "${SOURCE_ROOT}/${COMPONENT_NAME}"
IMPALA_TOOLCHAIN = ${SOURCE_ROOT}/${COMPONENT_NAME}/toolchain
DOWNLOAD_CDH_COMPONENTS = false
IMPALA_MAVEN_OPTIONS_OVERRIDE = "-s $HOME/.m2/settings.xml"
PYPI_MIRROR = 'https://pypi.infra.cloudera.com/api/pypi/pypi-public'
HIVE_SRC_DIR_OVERRIDE = "${SOURCE_ROOT}/hive"
HADOOP_BUILD_DIR = "${SOURCE_ROOT}/hadoop"
HADOOP_INCLUDE_DIR_OVERRIDE = ${SOURCE_ROOT}/hadoop/include
HADOOP_LIB_DIR_OVERRIDE = "${SOURCE_ROOT}/hadoop/lib"
KUDU_CLIENT_DIR = "${SOURCE_ROOT}/kudu/build/release/client"
KUDU_BUILD_DIR = /

IMPALA_BUILD_VARS = "COMPONENT_NAME=impala IMPALA_HOME=${SOURCE_ROOT}/${COMPONENT_NAME} IMPALA_TOOLCHAIN=${SOURCE_ROOT}/${COMPONENT_NAME}/toolchain DOWNLOAD_CDH_COMPONENTS=false IMPALA_MAVEN_OPTIONS_OVERRIDE=\"-s $HOME/.m2/settings.xml\" PYPI_MIRROR=https://pypi.infra.cloudera.com/api/pypi/pypi-public HIVE_SRC_DIR_OVERRIDE=${SOURCE_ROOT}/hive HADOOP_BUILD_DIR=${SOURCE_ROOT}/hadoop HADOOP_INCLUDE_DIR_OVERRIDE=${SOURCE_ROOT}/hadoop/include HADOOP_LIB_DIR_OVERRIDE=${SOURCE_ROOT}/hadoop/lib KUDU_CLIENT_DIR=${SOURCE_ROOT}/kudu/build/release/client KUDU_BUILD_DIR=${SOURCE_ROOT}/kudu/build/release"

PATH = "${SOURCE_ROOT}/buildvenv2.7/bin:${PATH}"

  [[artifacts]]
    artifact_1 = impala-${impala_jar_version}.tar.gz

  [[install_cmd]]
    cmd_1 = mkdir -p ${SOURCE_ROOT}/hive ${SOURCE_ROOT}/hadoop ${SOURCE_ROOT}/kudu ${SOURCE_ROOT}/impala/kudu/build/release
    cmd_2 = wget -q ${cdh_S3_DEV_LOC}/tars/hive/hive-${hive_jar_version}-source.tar.gz , ${SOURCE_ROOT}/hive
    cmd_3 = wget -q ${cdh_S3_DEV_LOC}/tars/hadoop/hadoop-${hadoop_jar_version}.tar.gz , ${SOURCE_ROOT}/hadoop
    cmd_4 = wget -q ${cdh_S3_DEV_LOC}/tars/kudu/kudu-${kudu_jar_version}.tar.gz , ${SOURCE_ROOT}/kudu
    cmd_5 = tar -zxf hive-${hive_jar_version}-source.tar.gz --strip-components=1 , ${SOURCE_ROOT}/hive
    cmd_6 = tar -zxf hadoop-${hadoop_jar_version}.tar.gz --strip-components=1 , ${SOURCE_ROOT}/hadoop
    cmd_7 = tar -zxf kudu-${kudu_jar_version}.tar.gz --strip-components=1 , ${SOURCE_ROOT}/kudu
    cmd_8 = cp -rf ${SOURCE_ROOT}/kudu/build/release/client/usr ${SOURCE_ROOT}/kudu/build/release/
    cmd_9 =  virtualenv --python=${HOME}/tools/python/2.7.9/bin/python buildvenv2.7 , ${SOURCE_ROOT}
    cmd_10 = bash -c "${IMPALA_BUILD_VARS} ./buildall.sh -noclean -notests -release_and_debug"
    cmd_11 = echo "Building hbase splitter"
    cmd_12 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${SOURCE_ROOT}/impala/bin/mvn-quiet.sh clean" , testdata
    cmd_13 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${SOURCE_ROOT}/impala/bin/mvn-quiet.sh package" , testdata
    cmd_15 = bash -c " find ${SOURCE_ROOT}/kudu/build/release/ -name \"libkudu_client.so.*\" -not -path \"*debug*\" -exec cp -L {} ${SOURCE_ROOT}/impala/kudu/build/release \; "
    cmd_16 = tar -zcf ../impala-${impala_jar_version}.tar.gz . --exclude-vcs --exclude=impala-${impala_jar_version}.tar.gz
    cmd_17 = mv ../impala-${impala_jar_version}.tar.gz .
    cmd_18 = bash -c "${IMPALA_BUILD_VARS} . bin/impala-config.sh && ${IMPALA_BUILD_VARS} make docker_images"

  [[text-replace]]
    REPLACE_1 = "export CDP_BUILD_NUMBER=.*", 'export CDP_BUILD_NUMBER=${GBN}', bin/impala-config.sh, regex_replace
    REPLACE_2 = "export CDP_HADOOP_VERSION=.*", 'export CDP_HADOOP_VERSION=${hadoop_jar_version}', bin/impala-config.sh, regex_replace
    REPLACE_3 = "export IMPALA_RANGER_VERSION=.*", 'export IMPALA_RANGER_VERSION=${ranger_jar_version}', bin/impala-config.sh, regex_replace
    REPLACE_4 = "export CDP_HIVE_VERSION=.*", 'export CDP_HIVE_VERSION=${hive_jar_version}', bin/impala-config.sh, regex_replace
    REPLACE_5 = "export IMPALA_TEZ_VERSION=.*", 'export IMPALA_TEZ_VERSION=${tez_jar_version}', bin/impala-config.sh, regex_replace
    # This must be REPLACE_6, as it needs to match up with canary.ini's REPLACE_6.
    REPLACE_6 = "__REGISTRY__", "docker-private.infra.cloudera.com/cdh/", cloudera/docker_images.yml, regex_replace
    REPLACE_7 = "export IMPALA_KNOX_VERSION=.*", 'export IMPALA_KNOX_VERSION=${knox_jar_version}', bin/impala-config.sh, regex_replace
    
  [[fortify_cmd]]
    cmd_1 = mkdir -p ${SOURCE_ROOT}/hive ${SOURCE_ROOT}/hadoop ${SOURCE_ROOT}/kudu ${SOURCE_ROOT}/impala/kudu/build/release
    cmd_2 = wget -q ${cdh_S3_DEV_LOC}/tars/hive/hive-${hive_jar_version}-source.tar.gz , ${SOURCE_ROOT}/hive
    cmd_3 = wget -q ${cdh_S3_DEV_LOC}/tars/hadoop/hadoop-${hadoop_jar_version}.tar.gz , ${SOURCE_ROOT}/hadoop
    cmd_4 = wget -q ${cdh_S3_DEV_LOC}/tars/kudu/kudu-${kudu_jar_version}.tar.gz , ${SOURCE_ROOT}/kudu
    cmd_5 = tar -zxf hive-${hive_jar_version}-source.tar.gz --strip-components=1 , ${SOURCE_ROOT}/hive
    cmd_6 = tar -zxf hadoop-${hadoop_jar_version}.tar.gz --strip-components=1 , ${SOURCE_ROOT}/hadoop
    cmd_7 = tar -zxf kudu-${kudu_jar_version}.tar.gz --strip-components=1 , ${SOURCE_ROOT}/kudu
    cmd_8 = cp -rf ${SOURCE_ROOT}/kudu/build/release/client/usr ${SOURCE_ROOT}/kudu/build/release/
    cmd_9 =  virtualenv --python=${HOME}/tools/python/2.7.9/bin/python buildvenv2.7 , ${SOURCE_ROOT}
    cmd_10 = bash -c "${IMPALA_BUILD_VARS} ./buildall.sh -noclean -notests -release_and_debug"
    cmd_11 = echo "Building hbase splitter"
    cmd_12 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${SOURCE_ROOT}/impala/bin/mvn-quiet.sh clean" , testdata
    cmd_13 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${SOURCE_ROOT}/impala/bin/mvn-quiet.sh package" , testdata
    cmd_14 = bash -c " find ${SOURCE_ROOT}/kudu/build/release/ -name \"libkudu_client.so.*\" -not -path \"*debug*\" -exec cp -L {} ${SOURCE_ROOT}/impala/kudu/build/release \; "
    cmd_15 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_CLEAN_CMD}", impala-parent
    cmd_16 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_TRANSLATE_CMD}", impala-parent
    cmd_17 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_CLEAN_CMD}", query-event-hook-api
    cmd_18 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_TRANSLATE_CMD}", query-event-hook-api
    cmd_19 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_CLEAN_CMD}", shaded-deps
    cmd_20 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_TRANSLATE_CMD}", shaded-deps
    cmd_21 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_CLEAN_CMD}", ext-data-source
    cmd_22 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_TRANSLATE_CMD}", ext-data-source
    cmd_23 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_CLEAN_CMD}", common/yarn-extras
    cmd_24 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_TRANSLATE_CMD}", common/yarn-extras
    cmd_25 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_CLEAN_CMD}", fe
    cmd_26 = bash -c " . ${SOURCE_ROOT}/impala/bin/impala-config.sh && ${MVN_CMD} -B -DskipTests ${FORTIFY_ARGS} -Dfortify.sca.buildId=impala-${impala_jar_version} ${FORTIFY_TRANSLATE_CMD}", fe
    cmd_27 = sourceanalyzer -b impala-${impala_jar_version} ${FORTIFY_SCAN_MEMORY} -scan -f impala-${impala_jar_version}.fpr

  [[docker_metadata_cmd]]
    cmd_1 = cloudera/docker_images.yml, file
 
